"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseCloudCodePublisher = void 0;
var _ParsePubSub = require("./ParsePubSub");
var _node = _interopRequireDefault(require("parse/node"));
var _logger = _interopRequireDefault(require("../logger"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ParseCloudCodePublisher {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.parsePublisher = _ParsePubSub.ParsePubSub.createPublisher(config);
  }
  onCloudCodeAfterSave(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterSave', request);
  }
  onCloudCodeAfterDelete(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterDelete', request);
  }
  onClearCachedRoles(user) {
    this.parsePublisher.publish(_node.default.applicationId + 'clearCache', JSON.stringify({
      userId: user.id
    }));
  }

  // Request is the request object from cloud code functions. request.object is a ParseObject.
  _onCloudCodeMessage(type, request) {
    _logger.default.verbose('Raw request from cloud code current : %j | original : %j', request.object, request.original);
    // We need the full JSON which includes className
    const message = {
      currentParseObject: request.object._toFullJSON()
    };
    if (request.original) {
      message.originalParseObject = request.original._toFullJSON();
    }
    if (request.classLevelPermissions) {
      message.classLevelPermissions = request.classLevelPermissions;
    }
    this.parsePublisher.publish(type, JSON.stringify(message));
  }
}
exports.ParseCloudCodePublisher = ParseCloudCodePublisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFyc2VQdWJTdWIiLCJyZXF1aXJlIiwiX25vZGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZ2dlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInBhcnNlUHVibGlzaGVyIiwiUGFyc2VQdWJTdWIiLCJjcmVhdGVQdWJsaXNoZXIiLCJvbkNsb3VkQ29kZUFmdGVyU2F2ZSIsInJlcXVlc3QiLCJfb25DbG91ZENvZGVNZXNzYWdlIiwiUGFyc2UiLCJhcHBsaWNhdGlvbklkIiwib25DbG91ZENvZGVBZnRlckRlbGV0ZSIsIm9uQ2xlYXJDYWNoZWRSb2xlcyIsInVzZXIiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInVzZXJJZCIsImlkIiwidHlwZSIsImxvZ2dlciIsInZlcmJvc2UiLCJvYmplY3QiLCJvcmlnaW5hbCIsIm1lc3NhZ2UiLCJjdXJyZW50UGFyc2VPYmplY3QiLCJfdG9GdWxsSlNPTiIsIm9yaWdpbmFsUGFyc2VPYmplY3QiLCJjbGFzc0xldmVsUGVybWlzc2lvbnMiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0xpdmVRdWVyeS9QYXJzZUNsb3VkQ29kZVB1Ymxpc2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZVB1YlN1YiB9IGZyb20gJy4vUGFyc2VQdWJTdWInO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5jbGFzcyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciB7XG4gIHBhcnNlUHVibGlzaGVyOiBPYmplY3Q7XG5cbiAgLy8gY29uZmlnIG9iamVjdCBvZiB0aGUgcHVibGlzaGVyLCByaWdodCBub3cgaXQgb25seSBjb250YWlucyB0aGUgcmVkaXNVUkwsXG4gIC8vIGJ1dCB3ZSBtYXkgZXh0ZW5kIGl0IGxhdGVyLlxuICBjb25zdHJ1Y3Rvcihjb25maWc6IGFueSA9IHt9KSB7XG4gICAgdGhpcy5wYXJzZVB1Ymxpc2hlciA9IFBhcnNlUHViU3ViLmNyZWF0ZVB1Ymxpc2hlcihjb25maWcpO1xuICB9XG5cbiAgb25DbG91ZENvZGVBZnRlclNhdmUocmVxdWVzdDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5fb25DbG91ZENvZGVNZXNzYWdlKFBhcnNlLmFwcGxpY2F0aW9uSWQgKyAnYWZ0ZXJTYXZlJywgcmVxdWVzdCk7XG4gIH1cblxuICBvbkNsb3VkQ29kZUFmdGVyRGVsZXRlKHJlcXVlc3Q6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2xvdWRDb2RlTWVzc2FnZShQYXJzZS5hcHBsaWNhdGlvbklkICsgJ2FmdGVyRGVsZXRlJywgcmVxdWVzdCk7XG4gIH1cblxuICBvbkNsZWFyQ2FjaGVkUm9sZXModXNlcjogUGFyc2UuT2JqZWN0KSB7XG4gICAgdGhpcy5wYXJzZVB1Ymxpc2hlci5wdWJsaXNoKFxuICAgICAgUGFyc2UuYXBwbGljYXRpb25JZCArICdjbGVhckNhY2hlJyxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHsgdXNlcklkOiB1c2VyLmlkIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlcXVlc3QgaXMgdGhlIHJlcXVlc3Qgb2JqZWN0IGZyb20gY2xvdWQgY29kZSBmdW5jdGlvbnMuIHJlcXVlc3Qub2JqZWN0IGlzIGEgUGFyc2VPYmplY3QuXG4gIF9vbkNsb3VkQ29kZU1lc3NhZ2UodHlwZTogc3RyaW5nLCByZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICBsb2dnZXIudmVyYm9zZShcbiAgICAgICdSYXcgcmVxdWVzdCBmcm9tIGNsb3VkIGNvZGUgY3VycmVudCA6ICVqIHwgb3JpZ2luYWwgOiAlaicsXG4gICAgICByZXF1ZXN0Lm9iamVjdCxcbiAgICAgIHJlcXVlc3Qub3JpZ2luYWxcbiAgICApO1xuICAgIC8vIFdlIG5lZWQgdGhlIGZ1bGwgSlNPTiB3aGljaCBpbmNsdWRlcyBjbGFzc05hbWVcbiAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgY3VycmVudFBhcnNlT2JqZWN0OiByZXF1ZXN0Lm9iamVjdC5fdG9GdWxsSlNPTigpLFxuICAgIH07XG4gICAgaWYgKHJlcXVlc3Qub3JpZ2luYWwpIHtcbiAgICAgIG1lc3NhZ2Uub3JpZ2luYWxQYXJzZU9iamVjdCA9IHJlcXVlc3Qub3JpZ2luYWwuX3RvRnVsbEpTT04oKTtcbiAgICB9XG4gICAgaWYgKHJlcXVlc3QuY2xhc3NMZXZlbFBlcm1pc3Npb25zKSB7XG4gICAgICBtZXNzYWdlLmNsYXNzTGV2ZWxQZXJtaXNzaW9ucyA9IHJlcXVlc3QuY2xhc3NMZXZlbFBlcm1pc3Npb25zO1xuICAgIH1cbiAgICB0aGlzLnBhcnNlUHVibGlzaGVyLnB1Ymxpc2godHlwZSwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUErQixTQUFBRSx1QkFBQUUsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUUvQixNQUFNRyx1QkFBdUIsQ0FBQztFQUc1QjtFQUNBO0VBQ0FDLFdBQVdBLENBQUNDLE1BQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtJQUM1QixJQUFJLENBQUNDLGNBQWMsR0FBR0Msd0JBQVcsQ0FBQ0MsZUFBZSxDQUFDSCxNQUFNLENBQUM7RUFDM0Q7RUFFQUksb0JBQW9CQSxDQUFDQyxPQUFZLEVBQVE7SUFDdkMsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0MsYUFBSyxDQUFDQyxhQUFhLEdBQUcsV0FBVyxFQUFFSCxPQUFPLENBQUM7RUFDdEU7RUFFQUksc0JBQXNCQSxDQUFDSixPQUFZLEVBQVE7SUFDekMsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0MsYUFBSyxDQUFDQyxhQUFhLEdBQUcsYUFBYSxFQUFFSCxPQUFPLENBQUM7RUFDeEU7RUFFQUssa0JBQWtCQSxDQUFDQyxJQUFrQixFQUFFO0lBQ3JDLElBQUksQ0FBQ1YsY0FBYyxDQUFDVyxPQUFPLENBQ3pCTCxhQUFLLENBQUNDLGFBQWEsR0FBRyxZQUFZLEVBQ2xDSyxJQUFJLENBQUNDLFNBQVMsQ0FBQztNQUFFQyxNQUFNLEVBQUVKLElBQUksQ0FBQ0s7SUFBRyxDQUFDLENBQUMsQ0FDcEM7RUFDSDs7RUFFQTtFQUNBVixtQkFBbUJBLENBQUNXLElBQVksRUFBRVosT0FBWSxFQUFRO0lBQ3BEYSxlQUFNLENBQUNDLE9BQU8sQ0FDWiwwREFBMEQsRUFDMURkLE9BQU8sQ0FBQ2UsTUFBTSxFQUNkZixPQUFPLENBQUNnQixRQUFRLENBQ2pCO0lBQ0Q7SUFDQSxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsa0JBQWtCLEVBQUVsQixPQUFPLENBQUNlLE1BQU0sQ0FBQ0ksV0FBVztJQUNoRCxDQUFDO0lBQ0QsSUFBSW5CLE9BQU8sQ0FBQ2dCLFFBQVEsRUFBRTtNQUNwQkMsT0FBTyxDQUFDRyxtQkFBbUIsR0FBR3BCLE9BQU8sQ0FBQ2dCLFFBQVEsQ0FBQ0csV0FBVyxFQUFFO0lBQzlEO0lBQ0EsSUFBSW5CLE9BQU8sQ0FBQ3FCLHFCQUFxQixFQUFFO01BQ2pDSixPQUFPLENBQUNJLHFCQUFxQixHQUFHckIsT0FBTyxDQUFDcUIscUJBQXFCO0lBQy9EO0lBQ0EsSUFBSSxDQUFDekIsY0FBYyxDQUFDVyxPQUFPLENBQUNLLElBQUksRUFBRUosSUFBSSxDQUFDQyxTQUFTLENBQUNRLE9BQU8sQ0FBQyxDQUFDO0VBQzVEO0FBQ0Y7QUFBQ0ssT0FBQSxDQUFBN0IsdUJBQUEsR0FBQUEsdUJBQUEifQ==