"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RedisCacheAdapter = void 0;
var _redis = require("redis");
var _logger = _interopRequireDefault(require("../../logger"));
var _KeyPromiseQueue = require("../../KeyPromiseQueue");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds
const FLUSH_DB_KEY = '__flush_db__';
function debug(...args) {
  const message = ['RedisCacheAdapter: ' + arguments[0]].concat(args.slice(1, args.length));
  _logger.default.debug.apply(_logger.default, message);
}
const isValidTTL = ttl => typeof ttl === 'number' && ttl > 0;
class RedisCacheAdapter {
  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {
    this.ttl = isValidTTL(ttl) ? ttl : DEFAULT_REDIS_TTL;
    this.client = (0, _redis.createClient)(redisCtx);
    this.queue = new _KeyPromiseQueue.KeyPromiseQueue();
    this.client.on('error', err => {
      _logger.default.error('RedisCacheAdapter client error', {
        error: err
      });
    });
    this.client.on('connect', () => {});
    this.client.on('reconnecting', () => {});
    this.client.on('ready', () => {});
  }
  async connect() {
    if (this.client.isOpen) {
      return;
    }
    return this.client.connect();
  }
  async handleShutdown() {
    if (!this.client) {
      return;
    }
    try {
      await this.client.quit();
    } catch (err) {
      _logger.default.error('RedisCacheAdapter error on shutdown', {
        error: err
      });
    }
  }
  async get(key) {
    debug('get', {
      key
    });
    try {
      await this.queue.enqueue(key);
      const res = await this.client.get(key);
      if (!res) {
        return null;
      }
      return JSON.parse(res);
    } catch (err) {
      _logger.default.error('RedisCacheAdapter error on get', {
        error: err
      });
    }
  }
  async put(key, value, ttl = this.ttl) {
    value = JSON.stringify(value);
    debug('put', {
      key,
      value,
      ttl
    });
    await this.queue.enqueue(key);
    if (ttl === 0) {
      // ttl of zero is a logical no-op, but redis cannot set expire time of zero
      return;
    }
    if (ttl === Infinity) {
      return this.client.set(key, value);
    }
    if (!isValidTTL(ttl)) {
      ttl = this.ttl;
    }
    return this.client.set(key, value, {
      PX: ttl
    });
  }
  async del(key) {
    debug('del', {
      key
    });
    await this.queue.enqueue(key);
    return this.client.del(key);
  }
  async clear() {
    debug('clear');
    await this.queue.enqueue(FLUSH_DB_KEY);
    return this.client.sendCommand(['FLUSHDB']);
  }

  // Used for testing
  getAllKeys() {
    return this.client.keys('*');
  }
}
exports.RedisCacheAdapter = RedisCacheAdapter;
var _default = RedisCacheAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX1JFRElTX1RUTCIsIkZMVVNIX0RCX0tFWSIsImRlYnVnIiwiYXJncyIsIm1lc3NhZ2UiLCJhcmd1bWVudHMiLCJjb25jYXQiLCJzbGljZSIsImxlbmd0aCIsImxvZ2dlciIsImFwcGx5IiwiaXNWYWxpZFRUTCIsInR0bCIsIlJlZGlzQ2FjaGVBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJyZWRpc0N0eCIsImNsaWVudCIsImNyZWF0ZUNsaWVudCIsInF1ZXVlIiwiS2V5UHJvbWlzZVF1ZXVlIiwib24iLCJlcnIiLCJlcnJvciIsImNvbm5lY3QiLCJpc09wZW4iLCJoYW5kbGVTaHV0ZG93biIsInF1aXQiLCJnZXQiLCJrZXkiLCJlbnF1ZXVlIiwicmVzIiwiSlNPTiIsInBhcnNlIiwicHV0IiwidmFsdWUiLCJzdHJpbmdpZnkiLCJJbmZpbml0eSIsInNldCIsIlBYIiwiZGVsIiwiY2xlYXIiLCJzZW5kQ29tbWFuZCIsImdldEFsbEtleXMiLCJrZXlzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0FkYXB0ZXJzL0NhY2hlL1JlZGlzQ2FjaGVBZGFwdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ3JlZGlzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vLi4vbG9nZ2VyJztcbmltcG9ydCB7IEtleVByb21pc2VRdWV1ZSB9IGZyb20gJy4uLy4uL0tleVByb21pc2VRdWV1ZSc7XG5cbmNvbnN0IERFRkFVTFRfUkVESVNfVFRMID0gMzAgKiAxMDAwOyAvLyAzMCBzZWNvbmRzIGluIG1pbGxpc2Vjb25kc1xuY29uc3QgRkxVU0hfREJfS0VZID0gJ19fZmx1c2hfZGJfXyc7XG5cbmZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3M6IGFueSkge1xuICBjb25zdCBtZXNzYWdlID0gWydSZWRpc0NhY2hlQWRhcHRlcjogJyArIGFyZ3VtZW50c1swXV0uY29uY2F0KGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpKTtcbiAgbG9nZ2VyLmRlYnVnLmFwcGx5KGxvZ2dlciwgbWVzc2FnZSk7XG59XG5cbmNvbnN0IGlzVmFsaWRUVEwgPSB0dGwgPT4gdHlwZW9mIHR0bCA9PT0gJ251bWJlcicgJiYgdHRsID4gMDtcblxuZXhwb3J0IGNsYXNzIFJlZGlzQ2FjaGVBZGFwdGVyIHtcbiAgY29uc3RydWN0b3IocmVkaXNDdHgsIHR0bCA9IERFRkFVTFRfUkVESVNfVFRMKSB7XG4gICAgdGhpcy50dGwgPSBpc1ZhbGlkVFRMKHR0bCkgPyB0dGwgOiBERUZBVUxUX1JFRElTX1RUTDtcbiAgICB0aGlzLmNsaWVudCA9IGNyZWF0ZUNsaWVudChyZWRpc0N0eCk7XG4gICAgdGhpcy5xdWV1ZSA9IG5ldyBLZXlQcm9taXNlUXVldWUoKTtcbiAgICB0aGlzLmNsaWVudC5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgbG9nZ2VyLmVycm9yKCdSZWRpc0NhY2hlQWRhcHRlciBjbGllbnQgZXJyb3InLCB7IGVycm9yOiBlcnIgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5jbGllbnQub24oJ2Nvbm5lY3QnLCAoKSA9PiB7fSk7XG4gICAgdGhpcy5jbGllbnQub24oJ3JlY29ubmVjdGluZycsICgpID0+IHt9KTtcbiAgICB0aGlzLmNsaWVudC5vbigncmVhZHknLCAoKSA9PiB7fSk7XG4gIH1cblxuICBhc3luYyBjb25uZWN0KCkge1xuICAgIGlmICh0aGlzLmNsaWVudC5pc09wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNvbm5lY3QoKTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZVNodXRkb3duKCkge1xuICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuY2xpZW50LnF1aXQoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignUmVkaXNDYWNoZUFkYXB0ZXIgZXJyb3Igb24gc2h1dGRvd24nLCB7IGVycm9yOiBlcnIgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0KGtleSkge1xuICAgIGRlYnVnKCdnZXQnLCB7IGtleSB9KTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5xdWV1ZS5lbnF1ZXVlKGtleSk7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5nZXQoa2V5KTtcbiAgICAgIGlmICghcmVzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignUmVkaXNDYWNoZUFkYXB0ZXIgZXJyb3Igb24gZ2V0JywgeyBlcnJvcjogZXJyIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHB1dChrZXksIHZhbHVlLCB0dGwgPSB0aGlzLnR0bCkge1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGRlYnVnKCdwdXQnLCB7IGtleSwgdmFsdWUsIHR0bCB9KTtcbiAgICBhd2FpdCB0aGlzLnF1ZXVlLmVucXVldWUoa2V5KTtcbiAgICBpZiAodHRsID09PSAwKSB7XG4gICAgICAvLyB0dGwgb2YgemVybyBpcyBhIGxvZ2ljYWwgbm8tb3AsIGJ1dCByZWRpcyBjYW5ub3Qgc2V0IGV4cGlyZSB0aW1lIG9mIHplcm9cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHRsID09PSBJbmZpbml0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzVmFsaWRUVEwodHRsKSkge1xuICAgICAgdHRsID0gdGhpcy50dGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsaWVudC5zZXQoa2V5LCB2YWx1ZSwgeyBQWDogdHRsIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVsKGtleSkge1xuICAgIGRlYnVnKCdkZWwnLCB7IGtleSB9KTtcbiAgICBhd2FpdCB0aGlzLnF1ZXVlLmVucXVldWUoa2V5KTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZGVsKGtleSk7XG4gIH1cblxuICBhc3luYyBjbGVhcigpIHtcbiAgICBkZWJ1ZygnY2xlYXInKTtcbiAgICBhd2FpdCB0aGlzLnF1ZXVlLmVucXVldWUoRkxVU0hfREJfS0VZKTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZENvbW1hbmQoWydGTFVTSERCJ10pO1xuICB9XG5cbiAgLy8gVXNlZCBmb3IgdGVzdGluZ1xuICBnZXRBbGxLZXlzKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5rZXlzKCcqJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXNDYWNoZUFkYXB0ZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUF3RDtBQUV4RCxNQUFNQSxpQkFBaUIsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDckMsTUFBTUMsWUFBWSxHQUFHLGNBQWM7QUFFbkMsU0FBU0MsS0FBSyxDQUFDLEdBQUdDLElBQVMsRUFBRTtFQUMzQixNQUFNQyxPQUFPLEdBQUcsQ0FBQyxxQkFBcUIsR0FBR0MsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDSSxLQUFLLENBQUMsQ0FBQyxFQUFFSixJQUFJLENBQUNLLE1BQU0sQ0FBQyxDQUFDO0VBQ3pGQyxlQUFNLENBQUNQLEtBQUssQ0FBQ1EsS0FBSyxDQUFDRCxlQUFNLEVBQUVMLE9BQU8sQ0FBQztBQUNyQztBQUVBLE1BQU1PLFVBQVUsR0FBR0MsR0FBRyxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUlBLEdBQUcsR0FBRyxDQUFDO0FBRXJELE1BQU1DLGlCQUFpQixDQUFDO0VBQzdCQyxXQUFXLENBQUNDLFFBQVEsRUFBRUgsR0FBRyxHQUFHWixpQkFBaUIsRUFBRTtJQUM3QyxJQUFJLENBQUNZLEdBQUcsR0FBR0QsVUFBVSxDQUFDQyxH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