"use strict";

var _AdapterLoader = _interopRequireDefault(require("../AdapterLoader"));

var _node = _interopRequireDefault(require("parse/node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const apple = require('./apple');

const gcenter = require('./gcenter');

const gpgames = require('./gpgames');

const facebook = require('./facebook');

const instagram = require('./instagram');

const linkedin = require('./linkedin');

const meetup = require('./meetup');

const google = require('./google');

const github = require('./github');

const twitter = require('./twitter');

const spotify = require('./spotify');

const digits = require('./twitter'); // digits tokens are validated by twitter


const janrainengage = require('./janrainengage');

const janraincapture = require('./janraincapture');

const line = require('./line');

const vkontakte = require('./vkontakte');

const qq = require('./qq');

const wechat = require('./wechat');

const weibo = require('./weibo');

const oauth2 = require('./oauth2');

const phantauth = require('./phantauth');

const microsoft = require('./microsoft');

const keycloak = require('./keycloak');

const ldap = require('./ldap');

const webauthn = require('./webauthn');

const anonymous = {
  validateAuthData: () => {
    return Promise.resolve();
  },
  validateAppId: () => {
    return Promise.resolve();
  }
};
const providers = {
  apple,
  gcenter,
  gpgames,
  facebook,
  instagram,
  linkedin,
  meetup,
  google,
  github,
  twitter,
  spotify,
  anonymous,
  digits,
  janrainengage,
  janraincapture,
  line,
  vkontakte,
  qq,
  wechat,
  weibo,
  phantauth,
  microsoft,
  keycloak,
  ldap,
  webauthn
};

function authDataValidator(provider, adapter, appIds, options) {
  return async function (authData, req, user, requestObject) {
    if (appIds && typeof adapter.validateAppId === 'function') {
      await Promise.resolve(adapter.validateAppId(appIds, authData, options, requestObject, req.config));
    }

    if (typeof adapter.validateAuthData === 'function') {
      return adapter.validateAuthData(authData, options, requestObject, req.config);
    } else if (typeof adapter.validateSetUp === 'function' && typeof adapter.validateLogin === 'function' && typeof adapter.validateUpdate === 'function') {
      // When masterKey is detected, we should trigger a logged in user
      const isLoggedIn = req.auth.user && user && req.auth.user.id === user.id || user && req.auth.isMaster;
      let hasAuthDataConfigured = false;

      if (user && user.get('authData') && user.get('authData')[provider]) {
        hasAuthDataConfigured = true;
      }

      if (isLoggedIn) {
        // User is updating their authData
        if (hasAuthDataConfigured) {
          return adapter.validateUpdate(authData, options, requestObject, req.config);
        } // Set up if the user does not have the provider configured


        return adapter.validateSetUp(authData, options, requestObject, req.config);
      } // Not logged in and authData is configured on the user


      if (hasAuthDataConfigured) {
        return adapter.validateLogin(authData, options, requestObject, req.config);
      } // User not logged in and the provider is not set up, for example when a new user
      // signs up or an existing user uses a new auth provider


      return adapter.validateSetUp(authData, options, requestObject, req.config);
    }

    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Adapter is not configured. Implement either validateAuthData or all of the following: validateSetUp, validateLogin and validateUpdate');
  };
}

function loadAuthAdapter(provider, authOptions) {
  // providers are auth providers implemented by default
  let defaultAdapter = providers[provider]; // authOptions can contain complete custom auth adapters or
  // a default auth adapter like Facebook

  const providerOptions = authOptions[provider];

  if (providerOptions && Object.prototype.hasOwnProperty.call(providerOptions, 'oauth2') && providerOptions['oauth2'] === true) {
    defaultAdapter = oauth2;
  } // Default provider not found and a custom auth provider was not provided


  if (!defaultAdapter && !providerOptions) {
    return;
  }

  const adapter = Object.assign({}, defaultAdapter);
  const appIds = providerOptions ? providerOptions.appIds : undefined; // Try the configuration methods

  if (providerOptions) {
    const optionalAdapter = (0, _AdapterLoader.default)(providerOptions, undefined, providerOptions);

    if (optionalAdapter) {
      ['validateAuthData', 'validateAppId', 'validateSetUp', 'validateLogin', 'validateUpdate', 'challenge', 'policy'].forEach(key => {
        if (optionalAdapter[key]) {
          adapter[key] = optionalAdapter[key];
        }
      });
    }
  }

  return {
    adapter,
    appIds,
    providerOptions
  };
}

module.exports = function (authOptions = {}, enableAnonymousUsers = true) {
  let _enableAnonymousUsers = enableAnonymousUsers;

  const setEnableAnonymousUsers = function (enable) {
    _enableAnonymousUsers = enable;
  }; // To handle the test cases on configuration


  const getValidatorForProvider = function (provider) {
    if (provider === 'anonymous' && !_enableAnonymousUsers) {
      return {
        validator: undefined
      };
    }

    const authAdapter = loadAuthAdapter(provider, authOptions);
    if (!authAdapter) return;
    const {
      adapter,
      appIds,
      providerOptions
    } = authAdapter;
    return {
      validator: authDataValidator(provider, adapter, appIds, providerOptions),
      adapter
    };
  };

  return Object.freeze({
    getValidatorForProvider,
    setEnableAnonymousUsers
  });
};

module.exports.loadAuthAdapter = loadAuthAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2luZGV4LmpzIl0sIm5hbWVzIjpbImFwcGxlIiwicmVxdWlyZSIsImdjZW50ZXIiLCJncGdhbWVzIiwiZmFjZWJvb2siLCJpbnN0YWdyYW0iLCJsaW5rZWRpbiIsIm1lZXR1cCIsImdvb2dsZSIsImdpdGh1YiIsInR3aXR0ZXIiLCJzcG90aWZ5IiwiZGlnaXRzIiwiamFucmFpbmVuZ2FnZSIsImphbnJhaW5jYXB0dXJlIiwibGluZSIsInZrb250YWt0ZSIsInFxIiwid2VjaGF0Iiwid2VpYm8iLCJvYXV0aDIiLCJwaGFudGF1dGgiLCJtaWNyb3NvZnQiLCJrZXljbG9hayIsImxkYXAiLCJ3ZWJhdXRobiIsImFub255bW91cyIsInZhbGlkYXRlQXV0aERhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbGlkYXRlQXBwSWQiLCJwcm92aWRlcnMiLCJhdXRoRGF0YVZhbGlkYXRvciIsInByb3ZpZGVyIiwiYWRhcHRlciIsImFwcElkcyIsIm9wdGlvbnMiLCJhdXRoRGF0YSIsInJlcSIsInVzZXIiLCJyZXF1ZXN0T2JqZWN0IiwiY29uZmlnIiwidmFsaWRhdGVTZXRVcCIsInZhbGlkYXRlTG9naW4iLCJ2YWxpZGF0ZVVwZGF0ZSIsImlzTG9nZ2VkSW4iLCJhdXRoIiwiaWQiLCJpc01hc3RlciIsImhhc0F1dGhEYXRhQ29uZmlndXJlZCIsImdldCIsIlBhcnNlIiwiRXJyb3IiLCJPVEhFUl9DQVVTRSIsImxvYWRBdXRoQWRhcHRlciIsImF1dGhPcHRpb25zIiwiZGVmYXVsdEFkYXB0ZXIiLCJwcm92aWRlck9wdGlvbnMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhc3NpZ24iLCJ1bmRlZmluZWQiLCJvcHRpb25hbEFkYXB0ZXIiLCJmb3JFYWNoIiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyIsImVuYWJsZUFub255bW91c1VzZXJzIiwiX2VuYWJsZUFub255bW91c1VzZXJzIiwic2V0RW5hYmxlQW5vbnltb3VzVXNlcnMiLCJlbmFibGUiLCJnZXRWYWxpZGF0b3JGb3JQcm92aWRlciIsInZhbGlkYXRvciIsImF1dGhBZGFwdGVyIiwiZnJlZXplIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUNBLE1BQU1LLFFBQVEsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsTUFBTU0sTUFBTSxHQUFHTixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNTyxNQUFNLEdBQUdQLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1RLE1BQU0sR0FBR1IsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsTUFBTVMsT0FBTyxHQUFHVCxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNVSxPQUFPLEdBQUdWLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1XLE1BQU0sR0FBR1gsT0FBTyxDQUFDLFdBQUQsQ0FBdEIsQyxDQUFxQzs7O0FBQ3JDLE1BQU1ZLGFBQWEsR0FBR1osT0FBTyxDQUFDLGlCQUFELENBQTdCOztBQUNBLE1BQU1hLGNBQWMsR0FBR2IsT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQUNBLE1BQU1jLElBQUksR0FBR2QsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsTUFBTWUsU0FBUyxHQUFHZixPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxNQUFNZ0IsRUFBRSxHQUFHaEIsT0FBTyxDQUFDLE1BQUQsQ0FBbEI7O0FBQ0EsTUFBTWlC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O1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuXG5jb25zdCBhcHBsZSA9IHJlcXVpcmUoJy4vYXBwbGUnKTtcbmNvbnN0IGdjZW50ZXIgPSByZXF1aXJlKCcuL2djZW50ZXInKTtcbmNvbnN0IGdwZ2FtZXMgPSByZXF1aXJlKCcuL2dwZ2FtZXMnKTtcbmNvbnN0IGZhY2Vib29rID0gcmVxdWlyZSgnLi9mYWNlYm9vaycpO1xuY29uc3QgaW5zdGFncmFtID0gcmVxdWlyZSgnLi9pbnN0YWdyYW0nKTtcbmNvbnN0IGxpbmtlZGluID0gcmVxdWlyZSgnLi9saW5rZWRpbicpO1xuY29uc3QgbWVldHVwID0gcmVxdWlyZSgnLi9tZWV0dXAnKTtcbmNvbnN0IGdvb2dsZSA9IHJlcXVpcmUoJy4vZ29vZ2xlJyk7XG5jb25zdCBnaXRodWIgPSByZXF1aXJlKCcuL2dpdGh1YicpO1xuY29uc3QgdHdpdHRlciA9IHJlcXVpcmUoJy4vdHdpdHRlcicpO1xuY29uc3Qgc3BvdGlmeSA9IHJlcXVpcmUoJy4vc3BvdGlmeScpO1xuY29uc3QgZGlnaXRzID0gcmVxdWlyZSgnLi90d2l0dGVyJyk7IC8vIGRpZ2l0cyB0b2tlbnMgYXJlIHZhbGlkYXRlZCBieSB0d2l0dGVyXG5jb25zdCBqYW5yYWluZW5nYWdlID0gcmVxdWlyZSgnLi9qYW5yYWluZW5nYWdlJyk7XG5jb25zdCBqYW5yYWluY2FwdHVyZSA9IHJlcXVpcmUoJy4vamFucmFpbmNhcHR1cmUnKTtcbmNvbnN0IGxpbmUgPSByZXF1aXJlKCcuL2xpbmUnKTtcbmNvbnN0IHZrb250YWt0ZSA9IHJlcXVpcmUoJy4vdmtvbnRha3RlJyk7XG5jb25zdCBxcSA9IHJlcXVpcmUoJy4vcXEnKTtcbmNvbnN0IHdlY2hhdCA9IHJlcXVpcmUoJy4vd2VjaGF0Jyk7XG5jb25zdCB3ZWlibyA9IHJlcXVpcmUoJy4vd2VpYm8nKTtcbmNvbnN0IG9hdXRoMiA9IHJlcXVpcmUoJy4vb2F1dGgyJyk7XG5jb25zdCBwaGFudGF1dGggPSByZXF1aXJlKCcuL3BoYW50YXV0aCcpO1xuY29uc3QgbWljcm9zb2Z0ID0gcmVxdWlyZSgnLi9taWNyb3NvZnQnKTtcbmNvbnN0IGtleWNsb2FrID0gcmVxdWlyZSgnLi9rZXljbG9haycpO1xuY29uc3QgbGRhcCA9IHJlcXVpcmUoJy4vbGRhcCcpO1xuY29uc3Qgd2ViYXV0aG4gPSByZXF1aXJlKCcuL3dlYmF1dGhuJyk7XG5cbmNvbnN0IGFub255bW91cyA9IHtcbiAgdmFsaWRhdGVBdXRoRGF0YTogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSxcbiAgdmFsaWRhdGVBcHBJZDogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSxcbn07XG5cbmNvbnN0IHByb3ZpZGVycyA9IHtcbiAgYXBwbGUsXG4gIGdjZW50ZXIsXG4gIGdwZ2FtZXMsXG4gIGZhY2Vib29rLFxuICBpbnN0YWdyYW0sXG4gIGxpbmtlZGluLFxuICBtZWV0dXAsXG4gIGdvb2dsZSxcbiAgZ2l0aHViLFxuICB0d2l0dGVyLFxuICBzcG90aWZ5LFxuICBhbm9ueW1vdXMsXG4gIGRpZ2l0cyxcbiAgamFucmFpbmVuZ2FnZSxcbiAgamFucmFpbmNhcHR1cmUsXG4gIGxpbmUsXG4gIHZrb250YWt0ZSxcbiAgcXEsXG4gIHdlY2hhdCxcbiAgd2VpYm8sXG4gIHBoYW50YXV0aCxcbiAgbWljcm9zb2Z0LFxuICBrZXljbG9hayxcbiAgbGRhcCxcbiAgd2ViYXV0aG4sXG59O1xuXG5mdW5jdGlvbiBhdXRoRGF0YVZhbGlkYXRvcihwcm92aWRlciwgYWRhcHRlciwgYXBwSWRzLCBvcHRpb25zKSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiAoYXV0aERhdGEsIHJlcSwgdXNlciwgcmVxdWVzdE9iamVjdCkge1xuICAgIGlmIChhcHBJZHMgJiYgdHlwZW9mIGFkYXB0ZXIudmFsaWRhdGVBcHBJZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICBhZGFwdGVyLnZhbGlkYXRlQXBwSWQoYXBwSWRzLCBhdXRoRGF0YSwgb3B0aW9ucywgcmVxdWVzdE9iamVjdCwgcmVxLmNvbmZpZylcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWRhcHRlci52YWxpZGF0ZUF1dGhEYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zLCByZXF1ZXN0T2JqZWN0LCByZXEuY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdHlwZW9mIGFkYXB0ZXIudmFsaWRhdGVTZXRVcCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGFkYXB0ZXIudmFsaWRhdGVMb2dpbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGFkYXB0ZXIudmFsaWRhdGVVcGRhdGUgPT09ICdmdW5jdGlvbidcbiAgICApIHtcbiAgICAgIC8vIFdoZW4gbWFzdGVyS2V5IGlzIGRldGVjdGVkLCB3ZSBzaG91bGQgdHJpZ2dlciBhIGxvZ2dlZCBpbiB1c2VyXG4gICAgICBjb25zdCBpc0xvZ2dlZEluID1cbiAgICAgICAgKHJlcS5hdXRoLnVzZXIgJiYgdXNlciAmJiByZXEuYXV0aC51c2VyLmlkID09PSB1c2VyLmlkKSB8fCAodXNlciAmJiByZXEuYXV0aC5pc01hc3Rlcik7XG4gICAgICBsZXQgaGFzQXV0aERhdGFDb25maWd1cmVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh1c2VyICYmIHVzZXIuZ2V0KCdhdXRoRGF0YScpICYmIHVzZXIuZ2V0KCdhdXRoRGF0YScpW3Byb3ZpZGVyXSkge1xuICAgICAgICBoYXNBdXRoRGF0YUNvbmZpZ3VyZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNMb2dnZWRJbikge1xuICAgICAgICAvLyBVc2VyIGlzIHVwZGF0aW5nIHRoZWlyIGF1dGhEYXRhXG4gICAgICAgIGlmIChoYXNBdXRoRGF0YUNvbmZpZ3VyZWQpIHtcbiAgICAgICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZVVwZGF0ZShhdXRoRGF0YSwgb3B0aW9ucywgcmVxdWVzdE9iamVjdCwgcmVxLmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHVwIGlmIHRoZSB1c2VyIGRvZXMgbm90IGhhdmUgdGhlIHByb3ZpZGVyIGNvbmZpZ3VyZWRcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIudmFsaWRhdGVTZXRVcChhdXRoRGF0YSwgb3B0aW9ucywgcmVxdWVzdE9iamVjdCwgcmVxLmNvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdCBsb2dnZWQgaW4gYW5kIGF1dGhEYXRhIGlzIGNvbmZpZ3VyZWQgb24gdGhlIHVzZXJcbiAgICAgIGlmIChoYXNBdXRoRGF0YUNvbmZpZ3VyZWQpIHtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIudmFsaWRhdGVMb2dpbihhdXRoRGF0YSwgb3B0aW9ucywgcmVxdWVzdE9iamVjdCwgcmVxLmNvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVzZXIgbm90IGxvZ2dlZCBpbiBhbmQgdGhlIHByb3ZpZGVyIGlzIG5vdCBzZXQgdXAsIGZvciBleGFtcGxlIHdoZW4gYSBuZXcgdXNlclxuICAgICAgLy8gc2lnbnMgdXAgb3IgYW4gZXhpc3RpbmcgdXNlciB1c2VzIGEgbmV3IGF1dGggcHJvdmlkZXJcbiAgICAgIHJldHVybiBhZGFwdGVyLnZhbGlkYXRlU2V0VXAoYXV0aERhdGEsIG9wdGlvbnMsIHJlcXVlc3RPYmplY3QsIHJlcS5jb25maWcpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSxcbiAgICAgICdBZGFwdGVyIGlzIG5vdCBjb25maWd1cmVkLiBJbXBsZW1lbnQgZWl0aGVyIHZhbGlkYXRlQXV0aERhdGEgb3IgYWxsIG9mIHRoZSBmb2xsb3dpbmc6IHZhbGlkYXRlU2V0VXAsIHZhbGlkYXRlTG9naW4gYW5kIHZhbGlkYXRlVXBkYXRlJ1xuICAgICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxvYWRBdXRoQWRhcHRlcihwcm92aWRlciwgYXV0aE9wdGlvbnMpIHtcbiAgLy8gcHJvdmlkZXJzIGFyZSBhdXRoIHByb3ZpZGVycyBpbXBsZW1lbnRlZCBieSBkZWZhdWx0XG4gIGxldCBkZWZhdWx0QWRhcHRlciA9IHByb3ZpZGVyc1twcm92aWRlcl07XG4gIC8vIGF1dGhPcHRpb25zIGNhbiBjb250YWluIGNvbXBsZXRlIGN1c3RvbSBhdXRoIGFkYXB0ZXJzIG9yXG4gIC8vIGEgZGVmYXVsdCBhdXRoIGFkYXB0ZXIgbGlrZSBGYWNlYm9va1xuICBjb25zdCBwcm92aWRlck9wdGlvbnMgPSBhdXRoT3B0aW9uc1twcm92aWRlcl07XG4gIGlmIChcbiAgICBwcm92aWRlck9wdGlvbnMgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvdmlkZXJPcHRpb25zLCAnb2F1dGgyJykgJiZcbiAgICBwcm92aWRlck9wdGlvbnNbJ29hdXRoMiddID09PSB0cnVlXG4gICkge1xuICAgIGRlZmF1bHRBZGFwdGVyID0gb2F1dGgyO1xuICB9XG5cbiAgLy8gRGVmYXVsdCBwcm92aWRlciBub3QgZm91bmQgYW5kIGEgY3VzdG9tIGF1dGggcHJvdmlkZXIgd2FzIG5vdCBwcm92aWRlZFxuICBpZiAoIWRlZmF1bHRBZGFwdGVyICYmICFwcm92aWRlck9wdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdEFkYXB0ZXIpO1xuICBjb25zdCBhcHBJZHMgPSBwcm92aWRlck9wdGlvbnMgPyBwcm92aWRlck9wdGlvbnMuYXBwSWRzIDogdW5kZWZpbmVkO1xuXG4gIC8vIFRyeSB0aGUgY29uZmlndXJhdGlvbiBtZXRob2RzXG4gIGlmIChwcm92aWRlck9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHRpb25hbEFkYXB0ZXIgPSBsb2FkQWRhcHRlcihwcm92aWRlck9wdGlvbnMsIHVuZGVmaW5lZCwgcHJvdmlkZXJPcHRpb25zKTtcbiAgICBpZiAob3B0aW9uYWxBZGFwdGVyKSB7XG4gICAgICBbXG4gICAgICAgICd2YWxpZGF0ZUF1dGhEYXRhJyxcbiAgICAgICAgJ3ZhbGlkYXRlQXBwSWQnLFxuICAgICAgICAndmFsaWRhdGVTZXRVcCcsXG4gICAgICAgICd2YWxpZGF0ZUxvZ2luJyxcbiAgICAgICAgJ3ZhbGlkYXRlVXBkYXRlJyxcbiAgICAgICAgJ2NoYWxsZW5nZScsXG4gICAgICAgICdwb2xpY3knLFxuICAgICAgXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25hbEFkYXB0ZXJba2V5XSkge1xuICAgICAgICAgIGFkYXB0ZXJba2V5XSA9IG9wdGlvbmFsQWRhcHRlcltrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhdXRoT3B0aW9ucyA9IHt9LCBlbmFibGVBbm9ueW1vdXNVc2VycyA9IHRydWUpIHtcbiAgbGV0IF9lbmFibGVBbm9ueW1vdXNVc2VycyA9IGVuYWJsZUFub255bW91c1VzZXJzO1xuICBjb25zdCBzZXRFbmFibGVBbm9ueW1vdXNVc2VycyA9IGZ1bmN0aW9uIChlbmFibGUpIHtcbiAgICBfZW5hYmxlQW5vbnltb3VzVXNlcnMgPSBlbmFibGU7XG4gIH07XG4gIC8vIFRvIGhhbmRsZSB0aGUgdGVzdCBjYXNlcyBvbiBjb25maWd1cmF0aW9uXG4gIGNvbnN0IGdldFZhbGlkYXRvckZvclByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgaWYgKHByb3ZpZGVyID09PSAnYW5vbnltb3VzJyAmJiAhX2VuYWJsZUFub255bW91c1VzZXJzKSB7XG4gICAgICByZXR1cm4geyB2YWxpZGF0b3I6IHVuZGVmaW5lZCB9O1xuICAgIH1cbiAgICBjb25zdCBhdXRoQWRhcHRlciA9IGxvYWRBdXRoQWRhcHRlcihwcm92aWRlciwgYXV0aE9wdGlvbnMpO1xuICAgIGlmICghYXV0aEFkYXB0ZXIpIHJldHVybjtcbiAgICBjb25zdCB7IGFkYXB0ZXIsIGFwcElkcywgcHJvdmlkZXJPcHRpb25zIH0gPSBhdXRoQWRhcHRlcjtcbiAgICByZXR1cm4geyB2YWxpZGF0b3I6IGF1dGhEYXRhVmFsaWRhdG9yKHByb3ZpZGVyLCBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyksIGFkYXB0ZXIgfTtcbiAgfTtcblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZ2V0VmFsaWRhdG9yRm9yUHJvdmlkZXIsXG4gICAgc2V0RW5hYmxlQW5vbnltb3VzVXNlcnMsXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMubG9hZEF1dGhBZGFwdGVyID0gbG9hZEF1dGhBZGFwdGVyO1xuIl19