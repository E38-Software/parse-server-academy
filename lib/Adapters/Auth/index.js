"use strict";

var _AdapterLoader = _interopRequireDefault(require("../AdapterLoader"));

var _node = _interopRequireDefault(require("parse/node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const apple = require('./apple');

const gcenter = require('./gcenter');

const gpgames = require('./gpgames');

const facebook = require('./facebook');

const instagram = require('./instagram');

const linkedin = require('./linkedin');

const meetup = require('./meetup');

const google = require('./google');

const github = require('./github');

const twitter = require('./twitter');

const spotify = require('./spotify');

const digits = require('./twitter'); // digits tokens are validated by twitter


const janrainengage = require('./janrainengage');

const janraincapture = require('./janraincapture');

const line = require('./line');

const vkontakte = require('./vkontakte');

const qq = require('./qq');

const wechat = require('./wechat');

const weibo = require('./weibo');

const oauth2 = require('./oauth2');

const phantauth = require('./phantauth');

const microsoft = require('./microsoft');

const keycloak = require('./keycloak');

const ldap = require('./ldap');

const webauthn = require('./webauthn');

const anonymous = {
  validateAuthData: () => {
    return Promise.resolve();
  },
  validateAppId: () => {
    return Promise.resolve();
  }
};
const providers = {
  apple,
  gcenter,
  gpgames,
  facebook,
  instagram,
  linkedin,
  meetup,
  google,
  github,
  twitter,
  spotify,
  anonymous,
  digits,
  janrainengage,
  janraincapture,
  line,
  vkontakte,
  qq,
  wechat,
  weibo,
  phantauth,
  microsoft,
  keycloak,
  ldap,
  webauthn
};

function authDataValidator(provider, adapter, appIds, options) {
  return async function (authData, req, user) {
    if (appIds && typeof adapter.validateAppId === 'function') {
      await adapter.validateAppId(appIds, authData, options, req, user);
    }

    if (typeof adapter.validateAuthData === 'function') {
      return adapter.validateAuthData(authData, options, req, user);
    } else if (typeof adapter.validateSetUp === 'function' && typeof adapter.validateLogin === 'function' && typeof adapter.validateUpdate === 'function') {
      // We can consider for DX purpose when masterKey is detected, we should
      // trigger a logged in user
      const isLoggedIn = req.auth.user && user && req.auth.user.id === user.id || user && req.auth.isMaster;
      let hasAuthDataConfigured = false;

      if (user && user.get('authData') && user.get('authData')[provider]) {
        hasAuthDataConfigured = true;
      }

      if (isLoggedIn) {
        // User is currently updating his authData
        if (hasAuthDataConfigured) {
          return adapter.validateUpdate(authData, options, req, user);
        } // Let's setup if the user does not have the provider configured


        return adapter.validateSetUp(authData, options, req, user);
      } // Not logged in and authData configured into the DB


      if (hasAuthDataConfigured) {
        return adapter.validateLogin(authData, options, req, user);
      } // Finally, user not logged in and the provider is not setup
      // use cases: existing user using a new auth provider at login time or new user


      return adapter.validateSetUp(authData, options, req, user);
    }

    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Adapter not ready, need to implement validateAuthData or (validateSetUp, validateLogin, validateUpdate)');
  };
}

function loadAuthAdapter(provider, authOptions) {
  // `providers` are default providers already implemented
  // into parse-server
  let defaultAdapter = providers[provider]; // authOptions could contain a complete custom adapter
  // or just some options for a default auth parse adapter
  // like facebook

  const providerOptions = authOptions[provider];

  if (providerOptions && Object.prototype.hasOwnProperty.call(providerOptions, 'oauth2') && providerOptions['oauth2'] === true) {
    defaultAdapter = oauth2;
  } // Default provider not found and a custom auth provider was not provided


  if (!defaultAdapter && !providerOptions) {
    return;
  }

  const adapter = Object.assign({}, defaultAdapter);
  const appIds = providerOptions ? providerOptions.appIds : undefined; // Try the configuration methods

  if (providerOptions) {
    const optionalAdapter = (0, _AdapterLoader.default)(providerOptions, undefined, providerOptions);

    if (optionalAdapter) {
      ['validateAuthData', 'validateAppId', 'validateSetUp', 'validateLogin', 'validateUpdate', 'challenge', 'policy'].forEach(key => {
        if (optionalAdapter[key]) {
          adapter[key] = optionalAdapter[key];
        }
      });
    }
  }

  return {
    adapter,
    appIds,
    providerOptions
  };
}

module.exports = function (authOptions = {}, enableAnonymousUsers = true) {
  let _enableAnonymousUsers = enableAnonymousUsers;

  const setEnableAnonymousUsers = function (enable) {
    _enableAnonymousUsers = enable;
  }; // To handle the test cases on configuration


  const getValidatorForProvider = function (provider) {
    if (provider === 'anonymous' && !_enableAnonymousUsers) {
      return {
        validator: undefined
      };
    }

    const authAdapter = loadAuthAdapter(provider, authOptions);
    if (!authAdapter) return;
    const {
      adapter,
      appIds,
      providerOptions
    } = authAdapter;
    return {
      validator: authDataValidator(provider, adapter, appIds, providerOptions),
      adapter
    };
  };

  return Object.freeze({
    getValidatorForProvider,
    setEnableAnonymousUsers
  });
};

module.exports.loadAuthAdapter = loadAuthAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2luZGV4LmpzIl0sIm5hbWVzIjpbImFwcGxlIiwicmVxdWlyZSIsImdjZW50ZXIiLCJncGdhbWVzIiwiZmFjZWJvb2siLCJpbnN0YWdyYW0iLCJsaW5rZWRpbiIsIm1lZXR1cCIsImdvb2dsZSIsImdpdGh1YiIsInR3aXR0ZXIiLCJzcG90aWZ5IiwiZGlnaXRzIiwiamFucmFpbmVuZ2FnZSIsImphbnJhaW5jYXB0dXJlIiwibGluZSIsInZrb250YWt0ZSIsInFxIiwid2VjaGF0Iiwid2VpYm8iLCJvYXV0aDIiLCJwaGFudGF1dGgiLCJtaWNyb3NvZnQiLCJrZXljbG9hayIsImxkYXAiLCJ3ZWJhdXRobiIsImFub255bW91cyIsInZhbGlkYXRlQXV0aERhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbGlkYXRlQXBwSWQiLCJwcm92aWRlcnMiLCJhdXRoRGF0YVZhbGlkYXRvciIsInByb3ZpZGVyIiwiYWRhcHRlciIsImFwcElkcyIsIm9wdGlvbnMiLCJhdXRoRGF0YSIsInJlcSIsInVzZXIiLCJ2YWxpZGF0ZVNldFVwIiwidmFsaWRhdGVMb2dpbiIsInZhbGlkYXRlVXBkYXRlIiwiaXNMb2dnZWRJbiIsImF1dGgiLCJpZCIsImlzTWFzdGVyIiwiaGFzQXV0aERhdGFDb25maWd1cmVkIiwiZ2V0IiwiUGFyc2UiLCJFcnJvciIsIk9USEVSX0NBVVNFIiwibG9hZEF1dGhBZGFwdGVyIiwiYXV0aE9wdGlvbnMiLCJkZWZhdWx0QWRhcHRlciIsInByb3ZpZGVyT3B0aW9ucyIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFzc2lnbiIsInVuZGVmaW5lZCIsIm9wdGlvbmFsQWRhcHRlciIsImZvckVhY2giLCJrZXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW5hYmxlQW5vbnltb3VzVXNlcnMiLCJfZW5hYmxlQW5vbnltb3VzVXNlcnMiLCJzZXRFbmFibGVBbm9ueW1vdXNVc2VycyIsImVuYWJsZSIsImdldFZhbGlkYXRvckZvclByb3ZpZGVyIiwidmFsaWRhdG9yIiwiYXV0aEFkYXB0ZXIiLCJmcmVlemUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBQ0EsTUFBTUssUUFBUSxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxNQUFNTSxNQUFNLEdBQUdOLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1PLE1BQU0sR0FBR1AsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsTUFBTVEsTUFBTSxHQUFHUixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNUyxPQUFPLEdBQUdULE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBLE1BQU1VLE9BQU8sR0FBR1YsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVcsTUFBTSxHQUFHWCxPQUFPLENBQUMsV0FBRCxDQUF0QixDLENBQXFDOzs7QUFDckMsTUFBTVksYUFBYSxHQUFHWixPQUFPLENBQUMsaUJBQUQsQ0FBN0I7O0FBQ0EsTUFBTWEsY0FBYyxHQUFHYixPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTWMsSUFBSSxHQUFHZCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNZSxTQUFTLEdBQUdmLE9BQU8sQ0FBQyxhQUFELENBQXpCOztBQUNBLE1BQU1nQixFQUFFLEdBQUdoQixPQUFPLENBQUMsTUFBRCxDQUFsQjs7QUFDQSxNQUFNaUIsTUFBTSxHQUFHakIsT0FBTyxDQUFDLFVB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RCxFQUF5RDtBQUN4RSxNQUFJQyxxQkFBcUIsR0FBR0Qsb0JBQTVCOztBQUNBLFFBQU1FLHVCQUF1QixHQUFHLFVBQVVDLE1BQVYsRUFBa0I7QUFDaERGLElBQUFBLHFCQUFxQixHQUFHRSxNQUF4QjtBQUNELEdBRkQsQ0FGd0UsQ0FLeEU7OztBQUNBLFFBQU1DLHVCQUF1QixHQUFHLFVBQVV0QyxRQUFWLEVBQW9CO0FBQ2xELFFBQUlBLFFBQVEsS0FBSyxXQUFiLElBQTRCLENBQUNtQyxxQkFBakMsRUFBd0Q7QUFDdEQsYUFBTztBQUFFSSxRQUFBQSxTQUFTLEVBQUVYO0FBQWIsT0FBUDtBQUNEOztBQUNELFVBQU1ZLFdBQVcsR0FBR3JCLGVBQWUsQ0FBQ25CLFFBQUQsRUFBV29CLFdBQVgsQ0FBbkM7QUFDQSxRQUFJLENBQUNvQixXQUFMLEVBQWtCO0FBQ2xCLFVBQU07QUFBRXZDLE1BQUFBLE9BQUY7QUFBV0MsTUFBQUEsTUFBWDtBQUFtQm9CLE1BQUFBO0FBQW5CLFFBQXVDa0IsV0FBN0M7QUFDQSxXQUFPO0FBQUVELE1BQUFBLFNBQVMsRUFBRXhDLGlCQUFpQixDQUFDQyxRQUFELEVBQVdDLE9BQVgsRUFBb0JDLE1BQXBCLEVBQTRCb0IsZUFBNUIsQ0FBOUI7QUFBNEVyQixNQUFBQTtBQUE1RSxLQUFQO0FBQ0QsR0FSRDs7QUFVQSxTQUFPc0IsTUFBTSxDQUFDa0IsTUFBUCxDQUFjO0FBQ25CSCxJQUFBQSx1QkFEbUI7QUFFbkJGLElBQUFBO0FBRm1CLEdBQWQsQ0FBUDtBQUlELENBcEJEOztBQXNCQUosTUFBTSxDQUFDQyxPQUFQLENBQWVkLGVBQWYsR0FBaUNBLGVBQWpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvYWRBZGFwdGVyIGZyb20gJy4uL0FkYXB0ZXJMb2FkZXInO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuXG5jb25zdCBhcHBsZSA9IHJlcXVpcmUoJy4vYXBwbGUnKTtcbmNvbnN0IGdjZW50ZXIgPSByZXF1aXJlKCcuL2djZW50ZXInKTtcbmNvbnN0IGdwZ2FtZXMgPSByZXF1aXJlKCcuL2dwZ2FtZXMnKTtcbmNvbnN0IGZhY2Vib29rID0gcmVxdWlyZSgnLi9mYWNlYm9vaycpO1xuY29uc3QgaW5zdGFncmFtID0gcmVxdWlyZSgnLi9pbnN0YWdyYW0nKTtcbmNvbnN0IGxpbmtlZGluID0gcmVxdWlyZSgnLi9saW5rZWRpbicpO1xuY29uc3QgbWVldHVwID0gcmVxdWlyZSgnLi9tZWV0dXAnKTtcbmNvbnN0IGdvb2dsZSA9IHJlcXVpcmUoJy4vZ29vZ2xlJyk7XG5jb25zdCBnaXRodWIgPSByZXF1aXJlKCcuL2dpdGh1YicpO1xuY29uc3QgdHdpdHRlciA9IHJlcXVpcmUoJy4vdHdpdHRlcicpO1xuY29uc3Qgc3BvdGlmeSA9IHJlcXVpcmUoJy4vc3BvdGlmeScpO1xuY29uc3QgZGlnaXRzID0gcmVxdWlyZSgnLi90d2l0dGVyJyk7IC8vIGRpZ2l0cyB0b2tlbnMgYXJlIHZhbGlkYXRlZCBieSB0d2l0dGVyXG5jb25zdCBqYW5yYWluZW5nYWdlID0gcmVxdWlyZSgnLi9qYW5yYWluZW5nYWdlJyk7XG5jb25zdCBqYW5yYWluY2FwdHVyZSA9IHJlcXVpcmUoJy4vamFucmFpbmNhcHR1cmUnKTtcbmNvbnN0IGxpbmUgPSByZXF1aXJlKCcuL2xpbmUnKTtcbmNvbnN0IHZrb250YWt0ZSA9IHJlcXVpcmUoJy4vdmtvbnRha3RlJyk7XG5jb25zdCBxcSA9IHJlcXVpcmUoJy4vcXEnKTtcbmNvbnN0IHdlY2hhdCA9IHJlcXVpcmUoJy4vd2VjaGF0Jyk7XG5jb25zdCB3ZWlibyA9IHJlcXVpcmUoJy4vd2VpYm8nKTtcbmNvbnN0IG9hdXRoMiA9IHJlcXVpcmUoJy4vb2F1dGgyJyk7XG5jb25zdCBwaGFudGF1dGggPSByZXF1aXJlKCcuL3BoYW50YXV0aCcpO1xuY29uc3QgbWljcm9zb2Z0ID0gcmVxdWlyZSgnLi9taWNyb3NvZnQnKTtcbmNvbnN0IGtleWNsb2FrID0gcmVxdWlyZSgnLi9rZXljbG9haycpO1xuY29uc3QgbGRhcCA9IHJlcXVpcmUoJy4vbGRhcCcpO1xuY29uc3Qgd2ViYXV0aG4gPSByZXF1aXJlKCcuL3dlYmF1dGhuJyk7XG5cbmNvbnN0IGFub255bW91cyA9IHtcbiAgdmFsaWRhdGVBdXRoRGF0YTogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSxcbiAgdmFsaWRhdGVBcHBJZDogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSxcbn07XG5cbmNvbnN0IHByb3ZpZGVycyA9IHtcbiAgYXBwbGUsXG4gIGdjZW50ZXIsXG4gIGdwZ2FtZXMsXG4gIGZhY2Vib29rLFxuICBpbnN0YWdyYW0sXG4gIGxpbmtlZGluLFxuICBtZWV0dXAsXG4gIGdvb2dsZSxcbiAgZ2l0aHViLFxuICB0d2l0dGVyLFxuICBzcG90aWZ5LFxuICBhbm9ueW1vdXMsXG4gIGRpZ2l0cyxcbiAgamFucmFpbmVuZ2FnZSxcbiAgamFucmFpbmNhcHR1cmUsXG4gIGxpbmUsXG4gIHZrb250YWt0ZSxcbiAgcXEsXG4gIHdlY2hhdCxcbiAgd2VpYm8sXG4gIHBoYW50YXV0aCxcbiAgbWljcm9zb2Z0LFxuICBrZXljbG9hayxcbiAgbGRhcCxcbiAgd2ViYXV0aG4sXG59O1xuXG5mdW5jdGlvbiBhdXRoRGF0YVZhbGlkYXRvcihwcm92aWRlciwgYWRhcHRlciwgYXBwSWRzLCBvcHRpb25zKSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiAoYXV0aERhdGEsIHJlcSwgdXNlcikge1xuICAgIGlmIChhcHBJZHMgJiYgdHlwZW9mIGFkYXB0ZXIudmFsaWRhdGVBcHBJZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXdhaXQgYWRhcHRlci52YWxpZGF0ZUFwcElkKGFwcElkcywgYXV0aERhdGEsIG9wdGlvbnMsIHJlcSwgdXNlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWRhcHRlci52YWxpZGF0ZUF1dGhEYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zLCByZXEsIHVzZXIpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2YgYWRhcHRlci52YWxpZGF0ZVNldFVwID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgYWRhcHRlci52YWxpZGF0ZUxvZ2luID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgYWRhcHRlci52YWxpZGF0ZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICkge1xuICAgICAgLy8gV2UgY2FuIGNvbnNpZGVyIGZvciBEWCBwdXJwb3NlIHdoZW4gbWFzdGVyS2V5IGlzIGRldGVjdGVkLCB3ZSBzaG91bGRcbiAgICAgIC8vIHRyaWdnZXIgYSBsb2dnZWQgaW4gdXNlclxuICAgICAgY29uc3QgaXNMb2dnZWRJbiA9XG4gICAgICAgIChyZXEuYXV0aC51c2VyICYmIHVzZXIgJiYgcmVxLmF1dGgudXNlci5pZCA9PT0gdXNlci5pZCkgfHwgKHVzZXIgJiYgcmVxLmF1dGguaXNNYXN0ZXIpO1xuICAgICAgbGV0IGhhc0F1dGhEYXRhQ29uZmlndXJlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodXNlciAmJiB1c2VyLmdldCgnYXV0aERhdGEnKSAmJiB1c2VyLmdldCgnYXV0aERhdGEnKVtwcm92aWRlcl0pIHtcbiAgICAgICAgaGFzQXV0aERhdGFDb25maWd1cmVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTG9nZ2VkSW4pIHtcbiAgICAgICAgLy8gVXNlciBpcyBjdXJyZW50bHkgdXBkYXRpbmcgaGlzIGF1dGhEYXRhXG4gICAgICAgIGlmIChoYXNBdXRoRGF0YUNvbmZpZ3VyZWQpIHtcbiAgICAgICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZVVwZGF0ZShhdXRoRGF0YSwgb3B0aW9ucywgcmVxLCB1c2VyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMZXQncyBzZXR1cCBpZiB0aGUgdXNlciBkb2VzIG5vdCBoYXZlIHRoZSBwcm92aWRlciBjb25maWd1cmVkXG4gICAgICAgIHJldHVybiBhZGFwdGVyLnZhbGlkYXRlU2V0VXAoYXV0aERhdGEsIG9wdGlvbnMsIHJlcSwgdXNlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdCBsb2dnZWQgaW4gYW5kIGF1dGhEYXRhIGNvbmZpZ3VyZWQgaW50byB0aGUgREJcbiAgICAgIGlmIChoYXNBdXRoRGF0YUNvbmZpZ3VyZWQpIHtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIudmFsaWRhdGVMb2dpbihhdXRoRGF0YSwgb3B0aW9ucywgcmVxLCB1c2VyKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluYWxseSwgdXNlciBub3QgbG9nZ2VkIGluIGFuZCB0aGUgcHJvdmlkZXIgaXMgbm90IHNldHVwXG4gICAgICAvLyB1c2UgY2FzZXM6IGV4aXN0aW5nIHVzZXIgdXNpbmcgYSBuZXcgYXV0aCBwcm92aWRlciBhdCBsb2dpbiB0aW1lIG9yIG5ldyB1c2VyXG4gICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZVNldFVwKGF1dGhEYXRhLCBvcHRpb25zLCByZXEsIHVzZXIpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSxcbiAgICAgICdBZGFwdGVyIG5vdCByZWFkeSwgbmVlZCB0byBpbXBsZW1lbnQgdmFsaWRhdGVBdXRoRGF0YSBvciAodmFsaWRhdGVTZXRVcCwgdmFsaWRhdGVMb2dpbiwgdmFsaWRhdGVVcGRhdGUpJ1xuICAgICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxvYWRBdXRoQWRhcHRlcihwcm92aWRlciwgYXV0aE9wdGlvbnMpIHtcbiAgLy8gYHByb3ZpZGVyc2AgYXJlIGRlZmF1bHQgcHJvdmlkZXJzIGFscmVhZHkgaW1wbGVtZW50ZWRcbiAgLy8gaW50byBwYXJzZS1zZXJ2ZXJcbiAgbGV0IGRlZmF1bHRBZGFwdGVyID0gcHJvdmlkZXJzW3Byb3ZpZGVyXTtcbiAgLy8gYXV0aE9wdGlvbnMgY291bGQgY29udGFpbiBhIGNvbXBsZXRlIGN1c3RvbSBhZGFwdGVyXG4gIC8vIG9yIGp1c3Qgc29tZSBvcHRpb25zIGZvciBhIGRlZmF1bHQgYXV0aCBwYXJzZSBhZGFwdGVyXG4gIC8vIGxpa2UgZmFjZWJvb2tcbiAgY29uc3QgcHJvdmlkZXJPcHRpb25zID0gYXV0aE9wdGlvbnNbcHJvdmlkZXJdO1xuICBpZiAoXG4gICAgcHJvdmlkZXJPcHRpb25zICYmXG4gICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3ZpZGVyT3B0aW9ucywgJ29hdXRoMicpICYmXG4gICAgcHJvdmlkZXJPcHRpb25zWydvYXV0aDInXSA9PT0gdHJ1ZVxuICApIHtcbiAgICBkZWZhdWx0QWRhcHRlciA9IG9hdXRoMjtcbiAgfVxuXG4gIC8vIERlZmF1bHQgcHJvdmlkZXIgbm90IGZvdW5kIGFuZCBhIGN1c3RvbSBhdXRoIHByb3ZpZGVyIHdhcyBub3QgcHJvdmlkZWRcbiAgaWYgKCFkZWZhdWx0QWRhcHRlciAmJiAhcHJvdmlkZXJPcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRBZGFwdGVyKTtcbiAgY29uc3QgYXBwSWRzID0gcHJvdmlkZXJPcHRpb25zID8gcHJvdmlkZXJPcHRpb25zLmFwcElkcyA6IHVuZGVmaW5lZDtcblxuICAvLyBUcnkgdGhlIGNvbmZpZ3VyYXRpb24gbWV0aG9kc1xuICBpZiAocHJvdmlkZXJPcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0aW9uYWxBZGFwdGVyID0gbG9hZEFkYXB0ZXIocHJvdmlkZXJPcHRpb25zLCB1bmRlZmluZWQsIHByb3ZpZGVyT3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbmFsQWRhcHRlcikge1xuICAgICAgW1xuICAgICAgICAndmFsaWRhdGVBdXRoRGF0YScsXG4gICAgICAgICd2YWxpZGF0ZUFwcElkJyxcbiAgICAgICAgJ3ZhbGlkYXRlU2V0VXAnLFxuICAgICAgICAndmFsaWRhdGVMb2dpbicsXG4gICAgICAgICd2YWxpZGF0ZVVwZGF0ZScsXG4gICAgICAgICdjaGFsbGVuZ2UnLFxuICAgICAgICAncG9saWN5JyxcbiAgICAgIF0uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3B0aW9uYWxBZGFwdGVyW2tleV0pIHtcbiAgICAgICAgICBhZGFwdGVyW2tleV0gPSBvcHRpb25hbEFkYXB0ZXJba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgYWRhcHRlciwgYXBwSWRzLCBwcm92aWRlck9wdGlvbnMgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXV0aE9wdGlvbnMgPSB7fSwgZW5hYmxlQW5vbnltb3VzVXNlcnMgPSB0cnVlKSB7XG4gIGxldCBfZW5hYmxlQW5vbnltb3VzVXNlcnMgPSBlbmFibGVBbm9ueW1vdXNVc2VycztcbiAgY29uc3Qgc2V0RW5hYmxlQW5vbnltb3VzVXNlcnMgPSBmdW5jdGlvbiAoZW5hYmxlKSB7XG4gICAgX2VuYWJsZUFub255bW91c1VzZXJzID0gZW5hYmxlO1xuICB9O1xuICAvLyBUbyBoYW5kbGUgdGhlIHRlc3QgY2FzZXMgb24gY29uZmlndXJhdGlvblxuICBjb25zdCBnZXRWYWxpZGF0b3JGb3JQcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlcikge1xuICAgIGlmIChwcm92aWRlciA9PT0gJ2Fub255bW91cycgJiYgIV9lbmFibGVBbm9ueW1vdXNVc2Vycykge1xuICAgICAgcmV0dXJuIHsgdmFsaWRhdG9yOiB1bmRlZmluZWQgfTtcbiAgICB9XG4gICAgY29uc3QgYXV0aEFkYXB0ZXIgPSBsb2FkQXV0aEFkYXB0ZXIocHJvdmlkZXIsIGF1dGhPcHRpb25zKTtcbiAgICBpZiAoIWF1dGhBZGFwdGVyKSByZXR1cm47XG4gICAgY29uc3QgeyBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyB9ID0gYXV0aEFkYXB0ZXI7XG4gICAgcmV0dXJuIHsgdmFsaWRhdG9yOiBhdXRoRGF0YVZhbGlkYXRvcihwcm92aWRlciwgYWRhcHRlciwgYXBwSWRzLCBwcm92aWRlck9wdGlvbnMpLCBhZGFwdGVyIH07XG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgIGdldFZhbGlkYXRvckZvclByb3ZpZGVyLFxuICAgIHNldEVuYWJsZUFub255bW91c1VzZXJzLFxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmxvYWRBdXRoQWRhcHRlciA9IGxvYWRBdXRoQWRhcHRlcjtcbiJdfQ==