"use strict";

const crypto = require('crypto');
const httpsRequest = require('./httpsRequest');
const Parse = require('parse/node').Parse;
const graphRequest = path => {
  return httpsRequest.get(`https://graph.accountkit.com/v1.1/${path}`);
};
function getRequestPath(authData, options) {
  const access_token = authData.access_token,
    appSecret = options && options.appSecret;
  if (appSecret) {
    const appsecret_proof = crypto.createHmac('sha256', appSecret).update(access_token).digest('hex');
    return `me?access_token=${access_token}&appsecret_proof=${appsecret_proof}`;
  }
  return `me?access_token=${access_token}`;
}
function validateAppId(appIds, authData, options) {
  if (!appIds.length) {
    return Promise.reject(new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is not configured.'));
  }
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.application && appIds.indexOf(data.application.id) != -1) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is invalid for this user.');
  });
}
function validateAuthData(authData, options) {
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.error) {
      throw data.error;
    }
    if (data && data.id == authData.id) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook Account Kit auth is invalid for this user.');
  });
}
module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiaHR0cHNSZXF1ZXN0IiwiUGFyc2UiLCJncmFwaFJlcXVlc3QiLCJwYXRoIiwiZ2V0IiwiZ2V0UmVxdWVzdFBhdGgiLCJhdXRoRGF0YSIsIm9wdGlvbnMiLCJhY2Nlc3NfdG9rZW4iLCJhcHBTZWNyZXQiLCJhcHBzZWNyZXRfcHJvb2YiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwidmFsaWRhdGVBcHBJZCIsImFwcElkcyIsImxlbmd0aCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJ0aGVuIiwiZGF0YSIsImFwcGxpY2F0aW9uIiwiaW5kZXhPZiIsImlkIiwidmFsaWRhdGVBdXRoRGF0YSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2ZhY2Vib29rYWNjb3VudGtpdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGh0dHBzUmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cHNSZXF1ZXN0Jyk7XG5jb25zdCBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKS5QYXJzZTtcblxuY29uc3QgZ3JhcGhSZXF1ZXN0ID0gcGF0aCA9PiB7XG4gIHJldHVybiBodHRwc1JlcXVlc3QuZ2V0KGBodHRwczovL2dyYXBoLmFjY291bnRraXQuY29tL3YxLjEvJHtwYXRofWApO1xufTtcblxuZnVuY3Rpb24gZ2V0UmVxdWVzdFBhdGgoYXV0aERhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgYWNjZXNzX3Rva2VuID0gYXV0aERhdGEuYWNjZXNzX3Rva2VuLFxuICAgIGFwcFNlY3JldCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5hcHBTZWNyZXQ7XG4gIGlmIChhcHBTZWNyZXQpIHtcbiAgICBjb25zdCBhcHBzZWNyZXRfcHJvb2YgPSBjcnlwdG9cbiAgICAgIC5jcmVhdGVIbWFjKCdzaGEyNTYnLCBhcHBTZWNyZXQpXG4gICAgICAudXBkYXRlKGFjY2Vzc190b2tlbilcbiAgICAgIC5kaWdlc3QoJ2hleCcpO1xuICAgIHJldHVybiBgbWU/YWNjZXNzX3Rva2VuPSR7YWNjZXNzX3Rva2VufSZhcHBzZWNyZXRfcHJvb2Y9JHthcHBzZWNyZXRfcHJvb2Z9YDtcbiAgfVxuICByZXR1cm4gYG1lP2FjY2Vzc190b2tlbj0ke2FjY2Vzc190b2tlbn1gO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKGFwcElkcywgYXV0aERhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCFhcHBJZHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAnRmFjZWJvb2sgYXBwIGlkIGZvciBBY2NvdW50IEtpdCBpcyBub3QgY29uZmlndXJlZC4nXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZ3JhcGhSZXF1ZXN0KGdldFJlcXVlc3RQYXRoKGF1dGhEYXRhLCBvcHRpb25zKSkudGhlbihkYXRhID0+IHtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmFwcGxpY2F0aW9uICYmIGFwcElkcy5pbmRleE9mKGRhdGEuYXBwbGljYXRpb24uaWQpICE9IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAnRmFjZWJvb2sgYXBwIGlkIGZvciBBY2NvdW50IEtpdCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJ1xuICAgICk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiBncmFwaFJlcXVlc3QoZ2V0UmVxdWVzdFBhdGgoYXV0aERhdGEsIG9wdGlvbnMpKS50aGVuKGRhdGEgPT4ge1xuICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3IpIHtcbiAgICAgIHRocm93IGRhdGEuZXJyb3I7XG4gICAgfVxuICAgIGlmIChkYXRhICYmIGRhdGEuaWQgPT0gYXV0aERhdGEuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICdGYWNlYm9vayBBY2NvdW50IEtpdCBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDaEMsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFDOUMsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsWUFBWSxDQUFDLENBQUNFLEtBQUs7QUFFekMsTUFBTUMsWUFBWSxHQUFHQyxJQUFJLElBQUk7RUFDM0IsT0FBT0gsWUFBWSxDQUFDSSxHQUFHLENBQUUscUNBQW9DRCxJQUFLLEVBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBU0UsY0FBYyxDQUFDQyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtFQUN6QyxNQUFNQyxZQUFZLEdBQUdGLFFBQVEsQ0FBQ0UsWUFBWTtJQUN4Q0MsU0FBUyxHQUFHRixPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsU0FBUztFQUMxQyxJQUFJQSxTQUFTLEVBQUU7SUFDYixNQUFNQyxlQUFlLEdBQUdaLE1BQU0sQ0FDM0JhLFVBQVUsQ0FBQyxRQUFRLEVBQUVGLFNBQVMsQ0FBQyxDQUMvQkcsTUFBTSxDQUFDSixZQUFZLENBQUMsQ0FDcEJLLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDaEIsT0FBUSxtQkFBa0JMLFlBQWEsb0JBQW1CRSxlQUFnQixFQUFDO0VBQzdFO0VBQ0EsT0FBUSxtQkFBa0JGLFlBQWEsRUFBQztBQUMxQztBQUVBLFNBQVNNLGFBQWEsQ0FBQ0MsTUFBTSxFQUFFVCxRQUFRLEVBQUVDLE9BQU8sRUFBRTtFQUNoRCxJQUFJLENBQUNRLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFO0lBQ2xCLE9BQU9DLE9BQU8sQ0FBQ0MsTUFBTSxDQUNuQixJQUFJakIsS0FBSyxDQUFDa0IsS0FBSyxDQUNibEIsS0FBSyxDQUFDa0IsS0FBSyxDQUFDQyxnQkFBZ0IsRUFDNUIsb0RBQW9ELENBQ3JELENBQ0Y7RUFDSDtFQUNBLE9BQU9sQixZQUFZLENBQUNHLGNBQWMsQ0FBQ0MsUUFBUSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxDQUFDYyxJQUFJLENBQUNDLElBQUksSUFBSTtJQUNsRSxJQUFJQSxJQUFJLElBQUlBLElBQUksQ0FBQ0MsV0FBVyxJQUFJUixNQUFNLENBQUNTLE9BQU8sQ0FBQ0YsSUFBSSxDQUFDQyxXQUFXLENBQUNFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO01BQ3pFO0lBQ0Y7SUFDQSxNQUFNLElBQUl4QixLQUFLLENBQUNrQixLQUFLLENBQ25CbEIsS0FBSyxDQUFDa0IsS0FBSyxDQUFDQyxnQkFBZ0IsRUFDNUIsMkRBQTJELENBQzVEO0VBQ0gsQ0FBQyxDQUFDO0FBQ0o7QUFFQSxTQUFTTSxnQkFBZ0IsQ0FBQ3BCLFFBQVEsRUFBRUMsT0FBTyxFQUFFO0VBQzNDLE9BQU9MLFlBQVksQ0FBQ0csY0FBYyxDQUFDQyxRQUFRLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUNjLElBQUksQ0FBQ0MsSUFBSSxJQUFJO0lBQ2xFLElBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDSyxLQUFLLEVBQUU7TUFDdEIsTUFBTUwsSUFBSSxDQUFDSyxLQUFLO0lBQ2xCO0lBQ0EsSUFBSUwsSUFBSSxJQUFJQSxJQUFJLENBQUNHLEVBQUUsSUFBSW5CLFFBQVEsQ0FBQ21CLEVBQUUsRUFBRTtNQUNsQztJQUNGO0lBQ0EsTUFBTSxJQUFJeEIsS0FBSyxDQUFDa0IsS0FBSyxDQUNuQmxCLEtBQUssQ0FBQ2tCLEtBQUssQ0FBQ0MsZ0JBQWdCLEVBQzVCLHFEQUFxRCxDQUN0RDtFQUNILENBQUMsQ0FBQztBQUNKO0FBRUFRLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZmLGFBQWE7RUFDYlk7QUFDRixDQUFDIn0=