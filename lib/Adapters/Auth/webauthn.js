"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.policy = exports.validateLogin = exports.validateUpdate = exports.validateSetUp = exports.challenge = exports.getOrigin = void 0;

var _server = require("@simplewebauthn/server");

var _node = _interopRequireDefault(require("parse/node"));

var _jsonwebtoken = require("jsonwebtoken");

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const toUserFriendlyRpName = url => {
  const domain = getDomainWithoutWww(url);
  const baseDomain = getBaseDomain(domain).split('.')[0];
  const words = baseDomain.split('-');
  return words.reduce((acc, word) => `${acc} ${word.charAt(0).toUpperCase() + word.slice(1)}`, '').trim();
};

const getJwtSecret = config => {
  const hash = _crypto.default.createHash('sha512');

  hash.update(config.masterKey, 'utf-8'); // Security:
  // sha512 return 128 chars, we can keep only 64 chars since it represent 6,61E98 combinations
  // using the hash allow to reduce risk of compromising the master key
  // if brute force is attempted on the JWT

  return hash.digest().toString('hex').slice(64);
}; // Example here: https://regex101.com/r/wN6cZ7/365


const getDomainWithoutWww = url => /^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)/g.exec(url)[1];

const getBaseDomain = domain => {
  const splittedDomain = domain.split('.'); // Handle localhost

  if (splittedDomain.length === 1) return domain.trim(); // Classic domains

  return `${splittedDomain[splittedDomain.length - 2]}.${splittedDomain[splittedDomain.length - 1]}`.trim();
};

const getOrigin = config => getBaseDomain(getDomainWithoutWww(config.publicServerURL || config.serverURL));

exports.getOrigin = getOrigin;

const extractSignedChallenge = (signedChallenge, config) => {
  if (!signedChallenge) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'signedChallenge is required.');
  let expectedChallenge;

  try {
    expectedChallenge = (0, _jsonwebtoken.verify)(signedChallenge, getJwtSecret(config)).challenge;
    if (!expectedChallenge) throw new Error();
    return expectedChallenge;
  } catch (e) {
    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Invalid signedChallenge');
  }
}; // Return credentials options to the client
// for register public key process


const registerOptions = (user, options = {}, config) => {
  const attestationOptions = (0, _server.generateAttestationOptions)({
    rpName: options && options.rpName || toUserFriendlyRpName(config.publicServerURL || config.serverURL),
    rpID: options.rpId || getOrigin(config),
    // here userId is only used as an identifier and this is never
    // retrieved by the user device
    // this has not real value for parse
    userID: user.id,
    // Could be an email or a firstname lastname depending of
    // the developer usage
    userDisplayName: typeof options.getUserDisplayName === 'function' ? options.getUserDisplayName(user) : user.get('email') || user.get('username'),
    userName: typeof options.getUsername === 'function' ? options.getUsername(user) : user.get('username'),
    timeout: 60000,
    attestationType: options.attestationType || 'indirect',
    authenticatorSelection: {
      // Use required to avoid silent sign up
      userVerification: options.userVerification || 'required',
      residentKey: options.residentKey || 'preferred'
    }
  });
  return {
    // Use jwt signed challenge to avoid storing challenge in DB
    // Master key is considered safe here to sign the challenge
    // Add additional 20sec for a bad network latency
    signedChallenge: (0, _jsonwebtoken.sign)({
      challenge: attestationOptions.challenge
    }, getJwtSecret(config), {
      expiresIn: attestationOptions.timeout + 20000
    }),
    options: attestationOptions
  };
}; // Verify the attestation provided by the client


const verifyRegister = async ({
  signedChallenge,
  attestation
}, options = {}, config) => {
  if (!attestation) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'attestation is required.');
  const expectedChallenge = extractSignedChallenge(signedChallenge, config);

  try {
    const {
      verified,
      attestationInfo
    } = await (0, _server.verifyAttestationResponse)({
      credential: attestation,
      expectedChallenge,
      expectedOrigin: options.origin || getOrigin(config),
      expectedRPID: options.rpId || getOrigin(config)
    });

    if (verified) {
      return {
        counter: attestationInfo.counter,
        publicKey: attestationInfo.credentialPublicKey.toString('base64'),
        id: attestation.id
      };
    }
    /* istanbul ignore next: fail safe */


    throw new Error();
  } catch (e) {
    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Invalid webauthn attestation');
  }
};

const loginOptions = config => {
  const options = (0, _server.generateAssertionOptions)();
  return {
    options,
    signedChallenge: (0, _jsonwebtoken.sign)({
      challenge: options.challenge
    }, getJwtSecret(config), {
      expiresIn: options.timeout + 20000
    })
  };
};

const verifyLogin = ({
  assertion,
  signedChallenge
}, options = {}, config, user) => {
  const dbAuthData = user && user.get('authData') && user.get('authData').webauthn;
  if (!assertion) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'assertion is required.');
  const expectedChallenge = extractSignedChallenge(signedChallenge, config);

  try {
    const {
      verified,
      assertionInfo
    } = (0, _server.verifyAssertionResponse)({
      credential: assertion,
      expectedChallenge,
      expectedOrigin: options.origin || getOrigin(config),
      expectedRPID: options.rpId || getOrigin(config),
      authenticator: {
        credentialID: Buffer.from(dbAuthData.id, 'base64'),
        counter: dbAuthData.counter,
        credentialPublicKey: Buffer.from(dbAuthData.publicKey, 'base64')
      }
    });

    if (verified) {
      return _objectSpread(_objectSpread({}, dbAuthData), {}, {
        counter: assertionInfo.newCounter
      });
    }
    /* istanbul ignore next: fail safe */


    throw new Error();
  } catch (e) {
    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Invalid webauthn assertion');
  }
};

const challenge = async (challengeData, authData, adapterConfig = {}, req) => {
  // Allow logged user to update/setUp webauthn
  if (req.auth.user && req.auth.user.id) {
    return registerOptions(req.auth.user, adapterConfig.options, req.config);
  }

  return loginOptions(req.config);
};

exports.challenge = challenge;

const validateSetUp = async (authData, adapterConfig = {}, req) => {
  if (!req.auth.user && !req.auth.isMaster) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Webauthn can only be configured on an already logged in user.');
  return {
    save: await verifyRegister(authData, adapterConfig.options, req.config)
  };
};

exports.validateSetUp = validateSetUp;
const validateUpdate = validateSetUp;
exports.validateUpdate = validateUpdate;

const validateLogin = async (authData, adapterConfig = {}, req, user) => {
  if (!user) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'User not found for webauthn login.'); // Will save updated counter of the credential
  // and avoid cloned/bugged authenticators

  return {
    save: verifyLogin(authData, adapterConfig.options, req.config, user)
  };
};

exports.validateLogin = validateLogin;
const policy = 'solo';
exports.policy = policy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,