"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.policy = exports.validateLogin = exports.validateUpdate = exports.validateSetUp = exports.challenge = exports.getOrigin = exports.validateAppId = void 0;

var _server = require("@simplewebauthn/server");

var _node = _interopRequireDefault(require("parse/node"));

var _jsonwebtoken = require("jsonwebtoken");

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const validateAppId = () => Promise.resolve();

exports.validateAppId = validateAppId;

const toUserFriendlyRpName = url => {
  const domain = getDomainWithoutWww(url);
  const baseDomain = getBaseDomain(domain).split('.')[0];
  const words = baseDomain.split('-');
  return words.reduce((acc, word) => `${acc} ${word.charAt(0).toUpperCase() + word.slice(1)}`, '').trim();
};

const getJwtSecret = config => {
  const hash = _crypto.default.createHash('sha512');

  hash.update(config.masterKey, 'utf-8'); // Security:
  // sha512 return 128 chars, we can keep only 64 chars since it represent 6,61E98 combinations
  // using the hash allow to reduce risk of compromising the master key
  // if brute force is attempted on the JWT

  return hash.digest().toString('hex').slice(64);
}; // Example here: https://regex101.com/r/wN6cZ7/365


const getDomainWithoutWww = url => /^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)/g.exec(url)[1];

const getBaseDomain = domain => {
  const splittedDomain = domain.split('.'); // Handle localhost

  if (splittedDomain.length === 1) return domain.trim(); // Classic domains

  return `${splittedDomain[splittedDomain.length - 2]}.${splittedDomain[splittedDomain.length - 1]}`.trim();
};

const getOrigin = config => getBaseDomain(getDomainWithoutWww(config.publicServerURL || config.serverURL));

exports.getOrigin = getOrigin;

const extractSignedChallenge = (signedChallenge, config) => {
  if (!signedChallenge) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'signedChallenge is required.');
  let expectedChallenge;

  try {
    expectedChallenge = (0, _jsonwebtoken.verify)(signedChallenge, getJwtSecret(config)).challenge;
    if (!expectedChallenge) throw new Error();
    return expectedChallenge;
  } catch (e) {
    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Invalid signedChallenge');
  }
}; // Return credentials options to the client
// for register public key process


const registerOptions = (user, options = {}, config) => {
  const attestationOptions = (0, _server.generateAttestationOptions)({
    rpName: options && options.rpName || toUserFriendlyRpName(config.publicServerURL || config.serverURL),
    rpID: options.rpId || getOrigin(config),
    // here userId is only used as an identifier and this is never
    // retrieved by the user device
    // this has not real value for parse
    userID: user.id,
    // Could be an email or a firstname lastname depending of
    // the developer usage
    userDisplayName: typeof options.getUserDisplayName === 'function' ? options.getUserDisplayName(user) : user.get('email') || user.get('username'),
    userName: typeof options.getUsername === 'function' ? options.getUsername(user) : user.get('username'),
    timeout: 60000,
    attestationType: options.attestationType || 'indirect',
    authenticatorSelection: {
      // Use required to avoid silent sign up
      userVerification: 'required',
      requireResidentKey: options.requireResidentKey || false
    }
  });
  return {
    // Use jwt signed challenge to avoid storing challenge in DB
    // Master key is considered safe here to sign the challenge
    // Add additional 20sec for a bad network latency
    signedChallenge: (0, _jsonwebtoken.sign)({
      challenge: attestationOptions.challenge
    }, getJwtSecret(config), {
      expiresIn: attestationOptions.timeout + 20000
    }),
    options: attestationOptions
  };
}; // Verify the attestation provided by the client


const verifyRegister = async ({
  signedChallenge,
  attestation
}, options = {}, config) => {
  if (!attestation) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'attestation is required.');
  const expectedChallenge = extractSignedChallenge(signedChallenge, config);

  try {
    const {
      verified,
      authenticatorInfo
    } = await (0, _server.verifyAttestationResponse)({
      credential: attestation,
      expectedChallenge,
      expectedOrigin: options.origin || getOrigin(config),
      expectedRPID: options.rpId || getOrigin(config)
    });

    if (verified) {
      return {
        counter: authenticatorInfo.counter,
        publicKey: authenticatorInfo.base64PublicKey,
        id: attestation.id
      };
    }

    throw new Error();
  } catch (e) {
    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Invalid webauthn attestation');
  }
};

const loginOptions = config => {
  const options = (0, _server.generateAssertionOptions)();
  return {
    options,
    signedChallenge: (0, _jsonwebtoken.sign)({
      challenge: options.challenge
    }, getJwtSecret(config), {
      expiresIn: options.timeout + 20000
    })
  };
};

const verifyLogin = ({
  assertion,
  signedChallenge
}, options = {}, config, user) => {
  const dbAuthData = user && user.get('authData') && user.get('authData').webauthn;
  if (!dbAuthData) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'webauthn not configured for this user or credential id not recognized.');
  if (!assertion) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'assertion is required.');
  const expectedChallenge = extractSignedChallenge(signedChallenge, config);

  try {
    const {
      verified,
      authenticatorInfo
    } = (0, _server.verifyAssertionResponse)({
      credential: assertion,
      expectedChallenge,
      expectedOrigin: options.origin || getOrigin(config),
      expectedRPID: options.rpId || getOrigin(config),
      authenticator: {
        credentialID: dbAuthData.id,
        counter: dbAuthData.counter,
        publicKey: dbAuthData.publicKey
      }
    });

    if (verified) {
      return _objectSpread(_objectSpread({}, dbAuthData), {}, {
        counter: authenticatorInfo.counter
      });
    }

    throw new Error();
  } catch (e) {
    throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Invalid webauthn assertion');
  }
};

const challenge = async (challengeData, authData, adapterConfig = {}, req) => {
  // Allow logged user to update/setUp webauthn
  if (req.auth.user && req.auth.user.id) {
    return registerOptions(req.auth.user, adapterConfig.options, req.config);
  }

  return loginOptions(req.config);
};

exports.challenge = challenge;

const validateSetUp = async (authData, adapterConfig = {}, req) => {
  if (!req.auth.user && !req.auth.isMaster) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'Webauthn can only be configured on an already logged in user.');
  return {
    save: await verifyRegister(authData, adapterConfig.options, req.config)
  };
};

exports.validateSetUp = validateSetUp;
const validateUpdate = validateSetUp;
exports.validateUpdate = validateUpdate;

const validateLogin = async (authData, adapterConfig = {}, req, user) => {
  if (!user) throw new _node.default.Error(_node.default.Error.OTHER_CAUSE, 'User not found for webauthn login.'); // Will save updated counter of the credential
  // and avoid cloned/bugged authenticators

  return {
    save: verifyLogin(authData, adapterConfig.options, req.config, user)
  };
};

exports.validateLogin = validateLogin;
const policy = 'solo';
exports.policy = policy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL3dlYmF1dGhuLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRvVXNlckZyaWVuZGx5UnBOYW1lIiwidXJsIiwiZG9tYWluIiwiZ2V0RG9tYWluV2l0aG91dFd3dyIsImJhc2VEb21haW4iLCJnZXRCYXNlRG9tYWluIiwic3BsaXQiLCJ3b3JkcyIsInJlZHVjZSIsImFjYyIsIndvcmQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwidHJpbSIsImdldEp3dFNlY3JldCIsImNvbmZpZyIsImhhc2giLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwibWFzdGVyS2V5IiwiZGlnZXN0IiwidG9TdHJpbmciLCJleGVjIiwic3BsaXR0ZWREb21haW4iLCJsZW5ndGgiLCJnZXRPcmlnaW4iLCJwdWJsaWNTZXJ2ZXJVUkwiLCJzZXJ2ZXJVUkwiLCJleHRyYWN0U2lnbmVkQ2hhbGxlbmdlIiwic2lnbmVkQ2hhbGxlbmdlIiwiUGFyc2UiLCJFcnJvciIsIk9USEVSX0NBVVNFIiwiZXhwZWN0ZWRDaGFsbGVuZ2UiLCJjaGFsbGVuZ2UiLCJlIiwicmVnaXN0ZXJPcHRpb25zIiwidXNlciIsIm9wdGlvbnMiLCJhdHRlc3RhdGlvbk9wdGlvbnMiLCJycE5hbWUiLCJycElEIiwicnBJZCIsInVzZXJJRCIsImlkIiwidXNlckRpc3BsYXlOYW1lIiwiZ2V0VXNlckRpc3BsYXlOYW1lIiwiZ2V0IiwidXNlck5hbWUiLCJnZXRVc2VybmFtZSIsInRpbWVvdXQiLCJhdHRlc3RhdGlvblR5cGUiLCJhdXRoZW50aWNhdG9yU2VsZWN0aW9uIiwidXNlclZlcmlmaWNhdGlvbiIsInJlcXVpcmVSZXNpZGVudEtleSIsImV4cGlyZXNJbiIsInZlcmlmeVJlZ2lzdGVyIiwiYXR0ZXN0YXRpb24iLCJ2ZXJpZmllZCIsImF1dGhlbnRpY2F0b3JJbmZvIiwiY3JlZGVudGlhbCIsImV4cGVjdGVkT3JpZ2luIiwib3JpZ2luIiwiZXhwZWN0ZWRSUElEIiwiY291bnRlciIsInB1YmxpY0tleSIsImJhc2U2NFB1YmxpY0tleSIsImxvZ2luT3B0aW9ucyIsInZlcmlmeUxvZ2luIiwiYXNzZXJ0aW9uIiwiZGJBdXRoRGF0YSIsIndlYmF1dGhuIiwiYXV0aGVudGljYXRvciIsImNyZWRlbnRpYWxJRCIsImNoYWxsZW5nZURhdGEiLCJhdXRoRGF0YSIsImFkYXB0ZXJDb25maWciLCJyZXEiLCJhdXRoIiwidmFsaWRhdGVTZXRVcCIsImlzTWFzdGVyIiwic2F2ZSIsInZhbGlkYXRlVXBkYXRlIiwidmFsaWRhdGVMb2dpbiIsInBvbGljeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUtBOztBQU1BOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRU8sTUFBTUEsYUFBYSxHQUFHLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixFQUE1Qjs7OztBQUVQLE1BQU1DLG9CQUFvQixHQUFHQyxHQUFHLElBQUk7QUFDbEMsUUFBTUMsTUFBTSxHQUFHQyxtQkFBbUIsQ0FBQ0YsR0FBRCxDQUFsQztBQUNBLFFBQU1HLFVBQVUsR0FBR0MsYUFBYSxDQUFDSCxNQUFELENBQWIsQ0FBc0JJLEtBQXRCLENBQTRCLEdBQTVCLEVBQWlDLENBQWpDLENBQW5CO0FBQ0EsUUFBTUMsS0FBSyxHQUFHSCxVQUFVLENBQUNFLEtBQVgsQ0FBaUIsR0FBakIsQ0FBZDtBQUNBLFNBQU9DLEtBQUssQ0FDVEMsTUFESSxDQUNHLENBQUNDLEdBQUQsRUFBTUMsSUFBTixLQUFnQixHQUFFRCxHQUFJLElBQUdDLElBQUksQ0FBQ0MsTUFBTCxDQUFZLENBQVosRUFBZUMsV0FBZixLQUErQkYsSUFBSSxDQUFDRyxLQUFMLENBQVcsQ0FBWCxDQUFjLEVBRHpFLEVBQzRFLEVBRDVFLEVBRUpDLElBRkksRUFBUDtBQUdELENBUEQ7O0FBU0EsTUFBTUMsWUFBWSxHQUFHQyxNQUFNLElBQUk7QUFDN0IsUUFBTUMsSUFBSSxHQUFHQyxnQkFBT0MsVUFBUCxDQUFr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QUFHSCxhQUF2Qjs7O0FBRUEsTUFBTUksYUFBYSxHQUFHLE9BQU9SLFFBQVAsRUFBaUJDLGFBQWEsR0FBRyxFQUFqQyxFQUFxQ0MsR0FBckMsRUFBMEN4QyxJQUExQyxLQUFtRDtBQUM5RSxNQUFJLENBQUNBLElBQUwsRUFBVyxNQUFNLElBQUlQLGNBQU1DLEtBQVYsQ0FBZ0JELGNBQU1DLEtBQU4sQ0FBWUMsV0FBNUIsRUFBeUMsb0NBQXpDLENBQU4sQ0FEbUUsQ0FFOUU7QUFDQTs7QUFDQSxTQUFPO0FBQUVpRCxJQUFBQSxJQUFJLEVBQUViLFdBQVcsQ0FBQ08sUUFBRCxFQUFXQyxhQUFhLENBQUN0QyxPQUF6QixFQUFrQ3VDLEdBQUcsQ0FBQy9ELE1BQXRDLEVBQThDdUIsSUFBOUM7QUFBbkIsR0FBUDtBQUNELENBTE07OztBQU9BLE1BQU0rQyxNQUFNLEdBQUcsTUFBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2ViQXV0aG4gQWRhcHRlciBjYW4gYmUgdXNlZCBhcyBhbiBhbHRlcm5hdGl2ZSB3YXkgdG8gbG9naW5cbiAqIFNpbmNlIHdlIGNhbm5vdCBzdXBwb3J0IGN1cnJlbnRseSBzaWdudXAgd2l0aCB3ZWJhdXRobiB3aWxsIHRocm93IGFuIGVycm9yIChkdWUgdG8gbGFjayBvZiByZXNldCBwcm9jZXNzKVxuICogVXNlciBuZWVkIHRvIGJlIGxvZ2dlZCBpbiB0byBzZXR1cCB0aGUgd2ViYXV0aG4gcHJvdmlkZXJcbiAqL1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVBdHRlc3RhdGlvbk9wdGlvbnMsXG4gIHZlcmlmeUF0dGVzdGF0aW9uUmVzcG9uc2UsXG4gIGdlbmVyYXRlQXNzZXJ0aW9uT3B0aW9ucyxcbiAgdmVyaWZ5QXNzZXJ0aW9uUmVzcG9uc2UsXG59IGZyb20gJ0BzaW1wbGV3ZWJhdXRobi9zZXJ2ZXInO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHsgc2lnbiwgdmVyaWZ5IH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlQXBwSWQgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcblxuY29uc3QgdG9Vc2VyRnJpZW5kbHlScE5hbWUgPSB1cmwgPT4ge1xuICBjb25zdCBkb21haW4gPSBnZXREb21haW5XaXRob3V0V3d3KHVybCk7XG4gIGNvbnN0IGJhc2VEb21haW4gPSBnZXRCYXNlRG9tYWluKGRvbWFpbikuc3BsaXQoJy4nKVswXTtcbiAgY29uc3Qgd29yZHMgPSBiYXNlRG9tYWluLnNwbGl0KCctJyk7XG4gIHJldHVybiB3b3Jkc1xuICAgIC5yZWR1Y2UoKGFjYywgd29yZCkgPT4gYCR7YWNjfSAke3dvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpfWAsICcnKVxuICAgIC50cmltKCk7XG59O1xuXG5jb25zdCBnZXRKd3RTZWNyZXQgPSBjb25maWcgPT4ge1xuICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTUxMicpO1xuICBoYXNoLnVwZGF0ZShjb25maWcubWFzdGVyS2V5LCAndXRmLTgnKTtcbiAgLy8gU2VjdXJpdHk6XG4gIC8vIHNoYTUxMiByZXR1cm4gMTI4IGNoYXJzLCB3ZSBjYW4ga2VlcCBvbmx5IDY0IGNoYXJzIHNpbmNlIGl0IHJlcHJlc2VudCA2LDYxRTk4IGNvbWJpbmF0aW9uc1xuICAvLyB1c2luZyB0aGUgaGFzaCBhbGxvdyB0byByZWR1Y2UgcmlzayBvZiBjb21wcm9taXNpbmcgdGhlIG1hc3RlciBrZXlcbiAgLy8gaWYgYnJ1dGUgZm9yY2UgaXMgYXR0ZW1wdGVkIG9uIHRoZSBKV1RcbiAgcmV0dXJuIGhhc2guZGlnZXN0KCkudG9TdHJpbmcoJ2hleCcpLnNsaWNlKDY0KTtcbn07XG5cbi8vIEV4YW1wbGUgaGVyZTogaHR0cHM6Ly9yZWdleDEwMS5jb20vci93TjZjWjcvMzY1XG5jb25zdCBnZXREb21haW5XaXRob3V0V3d3ID0gdXJsID0+XG4gIC9eKD86aHR0cHM/OlxcL1xcLyk/KD86W15AXFwvXFxuXStAKT8oPzp3d3dcXC4pPyhbXjpcXC8/XFxuXSspL2cuZXhlYyh1cmwpWzFdO1xuXG5jb25zdCBnZXRCYXNlRG9tYWluID0gZG9tYWluID0+IHtcbiAgY29uc3Qgc3BsaXR0ZWREb21haW4gPSBkb21haW4uc3BsaXQoJy4nKTtcbiAgLy8gSGFuZGxlIGxvY2FsaG9zdFxuICBpZiAoc3BsaXR0ZWREb21haW4ubGVuZ3RoID09PSAxKSByZXR1cm4gZG9tYWluLnRyaW0oKTtcbiAgLy8gQ2xhc3NpYyBkb21haW5zXG4gIHJldHVybiBgJHtzcGxpdHRlZERvbWFpbltzcGxpdHRlZERvbWFpbi5sZW5ndGggLSAyXX0uJHtcbiAgICBzcGxpdHRlZERvbWFpbltzcGxpdHRlZERvbWFpbi5sZW5ndGggLSAxXVxuICB9YC50cmltKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0T3JpZ2luID0gY29uZmlnID0+XG4gIGdldEJhc2VEb21haW4oZ2V0RG9tYWluV2l0aG91dFd3dyhjb25maWcucHVibGljU2VydmVyVVJMIHx8IGNvbmZpZy5zZXJ2ZXJVUkwpKTtcblxuY29uc3QgZXh0cmFjdFNpZ25lZENoYWxsZW5nZSA9IChzaWduZWRDaGFsbGVuZ2UsIGNvbmZpZykgPT4ge1xuICBpZiAoIXNpZ25lZENoYWxsZW5nZSlcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsICdzaWduZWRDaGFsbGVuZ2UgaXMgcmVxdWlyZWQuJyk7XG4gIGxldCBleHBlY3RlZENoYWxsZW5nZTtcbiAgdHJ5IHtcbiAgICBleHBlY3RlZENoYWxsZW5nZSA9IHZlcmlmeShzaWduZWRDaGFsbGVuZ2UsIGdldEp3dFNlY3JldChjb25maWcpKS5jaGFsbGVuZ2U7XG4gICAgaWYgKCFleHBlY3RlZENoYWxsZW5nZSkgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgcmV0dXJuIGV4cGVjdGVkQ2hhbGxlbmdlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9USEVSX0NBVVNFLCAnSW52YWxpZCBzaWduZWRDaGFsbGVuZ2UnKTtcbiAgfVxufTtcblxuLy8gUmV0dXJuIGNyZWRlbnRpYWxzIG9wdGlvbnMgdG8gdGhlIGNsaWVudFxuLy8gZm9yIHJlZ2lzdGVyIHB1YmxpYyBrZXkgcHJvY2Vzc1xuY29uc3QgcmVnaXN0ZXJPcHRpb25zID0gKHVzZXIsIG9wdGlvbnMgPSB7fSwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IGF0dGVzdGF0aW9uT3B0aW9ucyA9IGdlbmVyYXRlQXR0ZXN0YXRpb25PcHRpb25zKHtcbiAgICBycE5hbWU6XG4gICAgICAob3B0aW9ucyAmJiBvcHRpb25zLnJwTmFtZSkgfHxcbiAgICAgIHRvVXNlckZyaWVuZGx5UnBOYW1lKGNvbmZpZy5wdWJsaWNTZXJ2ZXJVUkwgfHwgY29uZmlnLnNlcnZlclVSTCksXG4gICAgcnBJRDogb3B0aW9ucy5ycElkIHx8IGdldE9yaWdpbihjb25maWcpLFxuICAgIC8vIGhlcmUgdXNlcklkIGlzIG9ubHkgdXNlZCBhcyBhbiBpZGVudGlmaWVyIGFuZCB0aGlzIGlzIG5ldmVyXG4gICAgLy8gcmV0cmlldmVkIGJ5IHRoZSB1c2VyIGRldmljZVxuICAgIC8vIHRoaXMgaGFzIG5vdCByZWFsIHZhbHVlIGZvciBwYXJzZVxuICAgIHVzZXJJRDogdXNlci5pZCxcbiAgICAvLyBDb3VsZCBiZSBhbiBlbWFpbCBvciBhIGZpcnN0bmFtZSBsYXN0bmFtZSBkZXBlbmRpbmcgb2ZcbiAgICAvLyB0aGUgZGV2ZWxvcGVyIHVzYWdlXG4gICAgdXNlckRpc3BsYXlOYW1lOlxuICAgICAgdHlwZW9mIG9wdGlvbnMuZ2V0VXNlckRpc3BsYXlOYW1lID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9ucy5nZXRVc2VyRGlzcGxheU5hbWUodXNlcilcbiAgICAgICAgOiB1c2VyLmdldCgnZW1haWwnKSB8fCB1c2VyLmdldCgndXNlcm5hbWUnKSxcbiAgICB1c2VyTmFtZTpcbiAgICAgIHR5cGVvZiBvcHRpb25zLmdldFVzZXJuYW1lID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5nZXRVc2VybmFtZSh1c2VyKSA6IHVzZXIuZ2V0KCd1c2VybmFtZScpLFxuICAgIHRpbWVvdXQ6IDYwMDAwLFxuICAgIGF0dGVzdGF0aW9uVHlwZTogb3B0aW9ucy5hdHRlc3RhdGlvblR5cGUgfHwgJ2luZGlyZWN0JyxcbiAgICBhdXRoZW50aWNhdG9yU2VsZWN0aW9uOiB7XG4gICAgICAvLyBVc2UgcmVxdWlyZWQgdG8gYXZvaWQgc2lsZW50IHNpZ24gdXBcbiAgICAgIHVzZXJWZXJpZmljYXRpb246ICdyZXF1aXJlZCcsXG4gICAgICByZXF1aXJlUmVzaWRlbnRLZXk6IG9wdGlvbnMucmVxdWlyZVJlc2lkZW50S2V5IHx8IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIC8vIFVzZSBqd3Qgc2lnbmVkIGNoYWxsZW5nZSB0byBhdm9pZCBzdG9yaW5nIGNoYWxsZW5nZSBpbiBEQlxuICAgIC8vIE1hc3RlciBrZXkgaXMgY29uc2lkZXJlZCBzYWZlIGhlcmUgdG8gc2lnbiB0aGUgY2hhbGxlbmdlXG4gICAgLy8gQWRkIGFkZGl0aW9uYWwgMjBzZWMgZm9yIGEgYmFkIG5ldHdvcmsgbGF0ZW5jeVxuICAgIHNpZ25lZENoYWxsZW5nZTogc2lnbih7IGNoYWxsZW5nZTogYXR0ZXN0YXRpb25PcHRpb25zLmNoYWxsZW5nZSB9LCBnZXRKd3RTZWNyZXQoY29uZmlnKSwge1xuICAgICAgZXhwaXJlc0luOiBhdHRlc3RhdGlvbk9wdGlvbnMudGltZW91dCArIDIwMDAwLFxuICAgIH0pLFxuICAgIG9wdGlvbnM6IGF0dGVzdGF0aW9uT3B0aW9ucyxcbiAgfTtcbn07XG5cbi8vIFZlcmlmeSB0aGUgYXR0ZXN0YXRpb24gcHJvdmlkZWQgYnkgdGhlIGNsaWVudFxuY29uc3QgdmVyaWZ5UmVnaXN0ZXIgPSBhc3luYyAoeyBzaWduZWRDaGFsbGVuZ2UsIGF0dGVzdGF0aW9uIH0sIG9wdGlvbnMgPSB7fSwgY29uZmlnKSA9PiB7XG4gIGlmICghYXR0ZXN0YXRpb24pIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSwgJ2F0dGVzdGF0aW9uIGlzIHJlcXVpcmVkLicpO1xuICBjb25zdCBleHBlY3RlZENoYWxsZW5nZSA9IGV4dHJhY3RTaWduZWRDaGFsbGVuZ2Uoc2lnbmVkQ2hhbGxlbmdlLCBjb25maWcpO1xuICB0cnkge1xuICAgIGNvbnN0IHsgdmVyaWZpZWQsIGF1dGhlbnRpY2F0b3JJbmZvIH0gPSBhd2FpdCB2ZXJpZnlBdHRlc3RhdGlvblJlc3BvbnNlKHtcbiAgICAgIGNyZWRlbnRpYWw6IGF0dGVzdGF0aW9uLFxuICAgICAgZXhwZWN0ZWRDaGFsbGVuZ2UsXG4gICAgICBleHBlY3RlZE9yaWdpbjogb3B0aW9ucy5vcmlnaW4gfHwgZ2V0T3JpZ2luKGNvbmZpZyksXG4gICAgICBleHBlY3RlZFJQSUQ6IG9wdGlvbnMucnBJZCB8fCBnZXRPcmlnaW4oY29uZmlnKSxcbiAgICB9KTtcbiAgICBpZiAodmVyaWZpZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50ZXI6IGF1dGhlbnRpY2F0b3JJbmZvLmNvdW50ZXIsXG4gICAgICAgIHB1YmxpY0tleTogYXV0aGVudGljYXRvckluZm8uYmFzZTY0UHVibGljS2V5LFxuICAgICAgICBpZDogYXR0ZXN0YXRpb24uaWQsXG4gICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSwgJ0ludmFsaWQgd2ViYXV0aG4gYXR0ZXN0YXRpb24nKTtcbiAgfVxufTtcblxuY29uc3QgbG9naW5PcHRpb25zID0gY29uZmlnID0+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IGdlbmVyYXRlQXNzZXJ0aW9uT3B0aW9ucygpO1xuICByZXR1cm4ge1xuICAgIG9wdGlvbnMsXG4gICAgc2lnbmVkQ2hhbGxlbmdlOiBzaWduKHsgY2hhbGxlbmdlOiBvcHRpb25zLmNoYWxsZW5nZSB9LCBnZXRKd3RTZWNyZXQoY29uZmlnKSwge1xuICAgICAgZXhwaXJlc0luOiBvcHRpb25zLnRpbWVvdXQgKyAyMDAwMCxcbiAgICB9KSxcbiAgfTtcbn07XG5cbmNvbnN0IHZlcmlmeUxvZ2luID0gKHsgYXNzZXJ0aW9uLCBzaWduZWRDaGFsbGVuZ2UgfSwgb3B0aW9ucyA9IHt9LCBjb25maWcsIHVzZXIpID0+IHtcbiAgY29uc3QgZGJBdXRoRGF0YSA9IHVzZXIgJiYgdXNlci5nZXQoJ2F1dGhEYXRhJykgJiYgdXNlci5nZXQoJ2F1dGhEYXRhJykud2ViYXV0aG47XG4gIGlmICghZGJBdXRoRGF0YSlcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSxcbiAgICAgICd3ZWJhdXRobiBub3QgY29uZmlndXJlZCBmb3IgdGhpcyB1c2VyIG9yIGNyZWRlbnRpYWwgaWQgbm90IHJlY29nbml6ZWQuJ1xuICAgICk7XG4gIGlmICghYXNzZXJ0aW9uKSB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT1RIRVJfQ0FVU0UsICdhc3NlcnRpb24gaXMgcmVxdWlyZWQuJyk7XG4gIGNvbnN0IGV4cGVjdGVkQ2hhbGxlbmdlID0gZXh0cmFjdFNpZ25lZENoYWxsZW5nZShzaWduZWRDaGFsbGVuZ2UsIGNvbmZpZyk7XG4gIHRyeSB7XG4gICAgY29uc3QgeyB2ZXJpZmllZCwgYXV0aGVudGljYXRvckluZm8gfSA9IHZlcmlmeUFzc2VydGlvblJlc3BvbnNlKHtcbiAgICAgIGNyZWRlbnRpYWw6IGFzc2VydGlvbixcbiAgICAgIGV4cGVjdGVkQ2hhbGxlbmdlLFxuICAgICAgZXhwZWN0ZWRPcmlnaW46IG9wdGlvbnMub3JpZ2luIHx8IGdldE9yaWdpbihjb25maWcpLFxuICAgICAgZXhwZWN0ZWRSUElEOiBvcHRpb25zLnJwSWQgfHwgZ2V0T3JpZ2luKGNvbmZpZyksXG4gICAgICBhdXRoZW50aWNhdG9yOiB7XG4gICAgICAgIGNyZWRlbnRpYWxJRDogZGJBdXRoRGF0YS5pZCxcbiAgICAgICAgY291bnRlcjogZGJBdXRoRGF0YS5jb3VudGVyLFxuICAgICAgICBwdWJsaWNLZXk6IGRiQXV0aERhdGEucHVibGljS2V5LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBpZiAodmVyaWZpZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRiQXV0aERhdGEsXG4gICAgICAgIGNvdW50ZXI6IGF1dGhlbnRpY2F0b3JJbmZvLmNvdW50ZXIsXG4gICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSwgJ0ludmFsaWQgd2ViYXV0aG4gYXNzZXJ0aW9uJyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjaGFsbGVuZ2UgPSBhc3luYyAoY2hhbGxlbmdlRGF0YSwgYXV0aERhdGEsIGFkYXB0ZXJDb25maWcgPSB7fSwgcmVxKSA9PiB7XG4gIC8vIEFsbG93IGxvZ2dlZCB1c2VyIHRvIHVwZGF0ZS9zZXRVcCB3ZWJhdXRoblxuICBpZiAocmVxLmF1dGgudXNlciAmJiByZXEuYXV0aC51c2VyLmlkKSB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyT3B0aW9ucyhyZXEuYXV0aC51c2VyLCBhZGFwdGVyQ29uZmlnLm9wdGlvbnMsIHJlcS5jb25maWcpO1xuICB9XG5cbiAgcmV0dXJuIGxvZ2luT3B0aW9ucyhyZXEuY29uZmlnKTtcbn07XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVNldFVwID0gYXN5bmMgKGF1dGhEYXRhLCBhZGFwdGVyQ29uZmlnID0ge30sIHJlcSkgPT4ge1xuICBpZiAoIXJlcS5hdXRoLnVzZXIgJiYgIXJlcS5hdXRoLmlzTWFzdGVyKVxuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9USEVSX0NBVVNFLFxuICAgICAgJ1dlYmF1dGhuIGNhbiBvbmx5IGJlIGNvbmZpZ3VyZWQgb24gYW4gYWxyZWFkeSBsb2dnZWQgaW4gdXNlci4nXG4gICAgKTtcbiAgcmV0dXJuIHsgc2F2ZTogYXdhaXQgdmVyaWZ5UmVnaXN0ZXIoYXV0aERhdGEsIGFkYXB0ZXJDb25maWcub3B0aW9ucywgcmVxLmNvbmZpZykgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVVwZGF0ZSA9IHZhbGlkYXRlU2V0VXA7XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUxvZ2luID0gYXN5bmMgKGF1dGhEYXRhLCBhZGFwdGVyQ29uZmlnID0ge30sIHJlcSwgdXNlcikgPT4ge1xuICBpZiAoIXVzZXIpIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PVEhFUl9DQVVTRSwgJ1VzZXIgbm90IGZvdW5kIGZvciB3ZWJhdXRobiBsb2dpbi4nKTtcbiAgLy8gV2lsbCBzYXZlIHVwZGF0ZWQgY291bnRlciBvZiB0aGUgY3JlZGVudGlhbFxuICAvLyBhbmQgYXZvaWQgY2xvbmVkL2J1Z2dlZCBhdXRoZW50aWNhdG9yc1xuICByZXR1cm4geyBzYXZlOiB2ZXJpZnlMb2dpbihhdXRoRGF0YSwgYWRhcHRlckNvbmZpZy5vcHRpb25zLCByZXEuY29uZmlnLCB1c2VyKSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHBvbGljeSA9ICdzb2xvJztcbiJdfQ==